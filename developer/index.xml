<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developers on Molecule</title>
    <link>http://scalamolecule.github.io/developer/</link>
    <description>Recent content in Developers on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Wed, 14 May 2014 02:13:50 UTC</lastBuildDate>
    <atom:link href="http://scalamolecule.github.io/developer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Developer</title>
      <link>http://scalamolecule.github.io/developer/overview/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/developer/overview/</guid>
      <description>

&lt;h1 id=&#34;developer:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Developer&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Source code transformation&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example: to find&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Names of twitter/facebook_page communities in neighborhoods of southern districts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;we can compose a &amp;ldquo;molecule query&amp;rdquo; that is very close to our
human sentence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.`type`(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;)
  .Neighborhood.District.region(&amp;quot;sw&amp;quot; or &amp;quot;s&amp;quot; or &amp;quot;se&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Molecule transforms this at compile time (with macros) to a little more elaborate Datalog query string and
 input rules that finds those communities in the Datomic database:&lt;/p&gt;

&lt;pre&gt;
[:find ?a
 :in $ %
 :where
   [?ent :community/name ?a]
   (rule1 ?ent)
   [?ent :community/neighborhood ?c]
   [?c :neighborhood/district ?d]
   (rule2 ?d)]

INPUTS:
List(
  datomic.db.Db@xxx,
  [[[rule1 ?ent] [?ent :community/type &#34;:community.type/twitter&#34;]]
   [[rule1 ?ent] [?ent :community/type &#34;:community.type/facebook_page&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/sw&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/s&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/se&#34;]]]
)
&lt;/pre&gt;

&lt;h4 id=&#34;benefits:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Benefits&lt;/h4&gt;

&lt;p&gt;By not having to write such complex Datalog queries and rules &amp;ldquo;by hand&amp;rdquo;, Molecule
allows you to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type less&lt;/li&gt;
&lt;li&gt;Make type safe queries with inferred return types&lt;/li&gt;
&lt;li&gt;Use your domain terms directly as query building blocks&lt;/li&gt;
&lt;li&gt;Model complex queries intuitively (easier to understand and maintain)&lt;/li&gt;
&lt;li&gt;Reduce syntactic noise&lt;/li&gt;
&lt;li&gt;Focus more on your domain and less on queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;possible-drawbacks:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Possible drawbacks&lt;/h4&gt;

&lt;p&gt;We still need to explore how far Molecule can match the expressive powers
 of Datalog. So far, all
 examples in the
[Seattle tutorial][seattle] have been
&amp;ldquo;molecularized&amp;rdquo; succesfully (see the
[Molecule Seattle tutorial][tutorial] and
[code][tutorialcode]). So as a proof-of-concept it looks promising&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transformation</title>
      <link>http://scalamolecule.github.io/developer/transformation/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/developer/transformation/</guid>
      <description>

&lt;h1 id=&#34;source-code-transformation:596edf0adf55e6ba8eb0683b47bc2db2&#34;&gt;Source code transformation&lt;/h1&gt;

&lt;p&gt;As an example: to find&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Names of twitter/facebook_page communities in neighborhoods of southern districts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;we can compose a &amp;ldquo;molecule query&amp;rdquo; that is very close to our
human sentence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.`type`(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;)
  .Neighborhood.District.region(&amp;quot;sw&amp;quot; or &amp;quot;s&amp;quot; or &amp;quot;se&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Molecule transforms this at compile time (with macros) to a little more elaborate Datalog query string and
 input rules that finds those communities in the Datomic database:&lt;/p&gt;

&lt;pre&gt;
[:find ?a
 :in $ %
 :where
   [?ent :community/name ?a]
   (rule1 ?ent)
   [?ent :community/neighborhood ?c]
   [?c :neighborhood/district ?d]
   (rule2 ?d)]

INPUTS:
List(
  datomic.db.Db@xxx,
  [[[rule1 ?ent] [?ent :community/type &#34;:community.type/twitter&#34;]]
   [[rule1 ?ent] [?ent :community/type &#34;:community.type/facebook_page&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/sw&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/s&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/se&#34;]]]
)
&lt;/pre&gt;

&lt;h4 id=&#34;benefits:596edf0adf55e6ba8eb0683b47bc2db2&#34;&gt;Benefits&lt;/h4&gt;

&lt;p&gt;By not having to write such complex Datalog queries and rules &amp;ldquo;by hand&amp;rdquo;, Molecule
allows you to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type less&lt;/li&gt;
&lt;li&gt;Make type safe queries with inferred return types&lt;/li&gt;
&lt;li&gt;Use your domain terms directly as query building blocks&lt;/li&gt;
&lt;li&gt;Model complex queries intuitively (easier to understand and maintain)&lt;/li&gt;
&lt;li&gt;Reduce syntactic noise&lt;/li&gt;
&lt;li&gt;Focus more on your domain and less on queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;possible-drawbacks:596edf0adf55e6ba8eb0683b47bc2db2&#34;&gt;Possible drawbacks&lt;/h4&gt;

&lt;p&gt;We still need to explore how far Molecule can match the expressive powers
 of Datalog. So far, all
 examples in the
[Seattle tutorial][seattle] have been
&amp;ldquo;molecularized&amp;rdquo; succesfully (see the
[Molecule Seattle tutorial][tutorial] and
[code][tutorialcode]). So as a proof-of-concept it looks promising&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>