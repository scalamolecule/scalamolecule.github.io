<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CRUD on Molecule</title>
    <link>http://scalamolecule.org/docs/crud/</link>
    <description>Recent content in CRUD on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Jan 2015 22:06:44 +0100</lastBuildDate>
    
	<atom:link href="http://scalamolecule.org/docs/crud/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Save</title>
      <link>http://scalamolecule.org/docs/crud/save/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/crud/save/</guid>
      <description>Save Tests&amp;hellip;
In Molecule we can populate a molecule with data and save it:
Person.name(&amp;quot;Fred&amp;quot;).likes(&amp;quot;pizza&amp;quot;).age(38).save  This will assert 3 facts in Datomic that all share the id of the new entity id fredId that is automatically created by Datomic:
fredId :person/name &amp;quot;Fred&amp;quot; fredId :person/likes &amp;quot;pizza&amp;quot; fredId :person/age 38  Type-safety Type-safety is guaranteed since each attribute only accepts values of its defined type.
Related data We can even save related date in the same operation</description>
    </item>
    
    <item>
      <title>Insert</title>
      <link>http://scalamolecule.org/docs/crud/insert/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/crud/insert/</guid>
      <description>Insert Tests&amp;hellip;
Multiple rows of data can be inserted by making a molecule that matches the values of each row:
Person.name.likes.age insert List( (&amp;quot;Fred&amp;quot;, &amp;quot;pizza&amp;quot;, 38), (&amp;quot;Lisa&amp;quot;, &amp;quot;pizza&amp;quot;, 7), (&amp;quot;Ben&amp;quot;, &amp;quot;pasta&amp;quot;, 5) )  Type-safety Type-safety is guaranteed since each tuple of data is enforced by the compiler to conform to the molecule type.
If the data set is not accepted type-wise, then either the molecule needs to be adjusted to match the type of data rows.</description>
    </item>
    
    <item>
      <title>Get</title>
      <link>http://scalamolecule.org/docs/crud/get/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/crud/get/</guid>
      <description>Get (read) Data We get/read data from the database by calling get on a molecule. This returns an Iterable of tuples that match the molecule attributes (except for arity-1):
val persons1attr: Iterable[String] = Person.name.get val persons2attrs: Iterable[(String, Int)] = Person.name.age.get val persons3attrs: Iterable[(String, Int, String)] = Person.name.age.likes.get // Etc.. to arity 22  With entity id Attributes of some entity are easily fetched by applying an entity id to the first namespace in the molecule</description>
    </item>
    
    <item>
      <title>Get Json</title>
      <link>http://scalamolecule.org/docs/crud/getjson/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/crud/getjson/</guid>
      <description>Get Json formatted Data We can get data in json format directly from the database by calling getJson on a molecule. So instead of converting tuples of data to json with some 3rd party library we can call getJson and pass the json data string directly to an Angular table for instance.
Internally, Molecule builds the json string in a StringBuffer directly from the raw data coming from Datomic (with regards to types being quoted or not).</description>
    </item>
    
    <item>
      <title>Update</title>
      <link>http://scalamolecule.org/docs/crud/update/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/crud/update/</guid>
      <description>Update data Tests&amp;hellip;
An &amp;ldquo;update&amp;rdquo; is a two-step process in Datomic:
 Retract old fact Assert new fact  Datomic doesn&amp;rsquo;t overwrite data. &amp;ldquo;Retract&amp;rdquo; is a statement that says &amp;ldquo;this data is no longer current&amp;rdquo; which means that it won&amp;rsquo;t turn up when you query for it as of now. If you query for it as of before you will see it!
Being able to see how data develops over time is a brillant core feature of Datomic.</description>
    </item>
    
    <item>
      <title>Retract</title>
      <link>http://scalamolecule.org/docs/crud/retract/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/crud/retract/</guid>
      <description>Retract data Tests&amp;hellip;
Retract facts To retract individual attributre values apply empty parenthesises to the attribute we want to retract and then update the molecule:
Community(belltownId).name().category().update  Here we retracted the name and category attribute values of the Belltown Community entity:
Retract entity To delete a whole entity with all its attribute values we can call retract on a Long entity id
fredId.retract  Here all attributes having the entity id fredId are retracted.</description>
    </item>
    
  </channel>
</rss>