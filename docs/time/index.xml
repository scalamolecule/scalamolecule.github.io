<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Time on Molecule</title>
    <link>http://scalamolecule.org/docs/time/</link>
    <description>Recent content in Time on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Jan 2015 22:06:44 +0100</lastBuildDate>
    
	<atom:link href="http://scalamolecule.org/docs/time/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AsOf/Since</title>
      <link>http://scalamolecule.org/docs/time/asof-since/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/time/asof-since/</guid>
      <description>AsOf / Since Tests&amp;hellip;
getAsOf(t) and getSince are complementary functions that either get us a snapshop of the database at some point in time or a current snapshot filtered with only changes after a point in time. Like before/after scenarios.
AsOf Temp test
Calling getAsOf(t) on a molecule gives us the data as of a certain point in time like t4:

As we saw in point in time, a t can be either a transaction entity id like tx4, a transaction number t4 or a java.</description>
    </item>
    
    <item>
      <title>History</title>
      <link>http://scalamolecule.org/docs/time/history/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/time/history/</guid>
      <description>History Tests&amp;hellip;
The history perspective gives us all the assertions and retractions that has happened over time.
Assertions and retractions Normally we get a snapshot of the database at a certain point in time. But when we call the getHistory method on a molecule we get all the assertions and retractions that has happened over time for the attributes of the molecule.
As an example we can imagine Fred being added in tx3 and then updated in tx6.</description>
    </item>
    
    <item>
      <title>With</title>
      <link>http://scalamolecule.org/docs/time/with/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/time/with/</guid>
      <description>With Tests&amp;hellip;
By supplying some test transaction data to getWith(testTxData) we can get a &amp;ldquo;branch&amp;rdquo; of the current database with the test transaction data applied in-memory. This is a very powerful way of testing future-like &amp;ldquo;what-if&amp;rdquo; scenarios
We could for instance add some transaction data tx8 to a Person molecule to see if we would get the extected persons back:
Person.name.likes.getWith(&amp;lt;tx8Data&amp;gt;) === ... // Persons after applying tx8  Applying transaction data To make it easier to supply transaction data to the getWith(txData) method, you can simply add Tx to a Molecule transaction function to get some valid transaction data:</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>http://scalamolecule.org/docs/time/testing/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 +0100</pubDate>
      
      <guid>http://scalamolecule.org/docs/time/testing/</guid>
      <description>Testing TestDbAsOf, TestDbSince and TestDbWith
For more complex test scenarios we can use a &amp;ldquo;test database&amp;rdquo; where we can freely make multiple separate molecule queries against a temporary database &amp;ldquo;branch&amp;rdquo;.
Test db All molecules expect an implicit connection object to be in scope. If we then set a temporary test database on such conn object we can subsequentially freely perform tests against this temporary database as though it was a &amp;ldquo;branch&amp;rdquo; (think git).</description>
    </item>
    
  </channel>
</rss>