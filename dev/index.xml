<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Macro transformations on Molecule</title>
    <link>http://www.scalamolecule.org/dev/</link>
    <description>Recent content in Macro transformations on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://www.scalamolecule.org/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Inspect Queries</title>
      <link>http://www.scalamolecule.org/dev/inspect-queries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/dev/inspect-queries/</guid>
      <description>Inspect queries All molecule query commands have a corresponding inspect command that will print inspection information to console.
 &amp;lt;molecule&amp;gt;.inspectGet &amp;lt;molecule&amp;gt;.inspectGetHistory &amp;lt;molecule&amp;gt;.inspectGetAsOf(...) &amp;lt;molecule&amp;gt;.inspectGetSince(...) &amp;lt;molecule&amp;gt;.inspectGetWith(...)  inspectGet Simply replace a get command on a molecule with inspectGet to print inspection data when running the code in a test for instance:
// Molecule to be inspected Community.name.Neighborhood.District.region_(&amp;#34;ne&amp;#34; or &amp;#34;sw&amp;#34;).get(3) === List( &amp;#34;Beach Drive Blog&amp;#34;, &amp;#34;KOMO Communities - Green Lake&amp;#34;, &amp;#34;Delridge Produce Cooperative&amp;#34; ) // Inspect `get` Community.</description>
    </item>
    
    <item>
      <title>Inspect Transactions</title>
      <link>http://www.scalamolecule.org/dev/inspect-transactions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/dev/inspect-transactions/</guid>
      <description>Inspect transactions Transactional operations can be inspected with the following methods:
 &amp;lt;molecule&amp;gt;.inspectSave &amp;lt;molecule&amp;gt;.inspectInsert(data...) &amp;lt;molecule&amp;gt;.inspectUpdate &amp;lt;entityId&amp;gt;.inspectRetract &amp;lt;entityId&amp;gt;.Tx(transactionMolecule).inspectRetract inspectRetract(entityIds, txMetaDataMolecules*)  Calling these inspect methods will print the produced transaction statements to console only and not perform any transaction on the database.
inspectSave If we are about to save a molecule we can instead call inspectSave on the same molecule to see what transaction statements Molecule will send to Datomic.
// Normal save Ns.</description>
    </item>
    
    <item>
      <title>Optimizations</title>
      <link>http://www.scalamolecule.org/dev/optimizations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/dev/optimizations/</guid>
      <description>Optimizations Save on compilation time If your code starts to have huge numbers of molecules, you can save time on compilation by importing a specialized Molecule api that sets a threshold for how many attributes are allowed in a molecule. This minimizes the amount of implicits waiting in vain to serve you and can reduce compilation time.
So, if your longest molecule in a code file has 7 attributes, then you could for instance set the api import to allow for 7 attributes:</description>
    </item>
    
    <item>
      <title>Clojure exchanges</title>
      <link>http://www.scalamolecule.org/dev/clojure-exchanges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/dev/clojure-exchanges/</guid>
      <description>Clojure Schemas To ease exchanging Datomic schemas with the Clojure world where Namespaces start with a lowercase letter by convention, Molecule also creates two convenience Schema &amp;ldquo;converters&amp;rdquo; that transact aliased attribute names where the first letter is either raised or lowered.
lowercase to Uppercase If you for instance want to use Molecule with an externally defined Datomic database Schema or data sets with lowercase namespace names you can define the Data Model as usual in Molecule with uppercase Namespace names and then rea:</description>
    </item>
    
    <item>
      <title>Pitfalls</title>
      <link>http://www.scalamolecule.org/dev/pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/dev/pitfalls/</guid>
      <description>Pitfalls Cannot resolve overloaded method &amp;lsquo;inputMolecule&amp;rsquo; When forgetting to explicitly calling m on an input molecule
val inputMolecule = Community.name(?) inputMolecule(&amp;#34;Ben&amp;#34;) // will not compile and likely be inferred as an error in your IDE Input molecule needs to be declared explicitly with the m method
val inputMolecule = m(Community.name(?)) // Now we can apply value to the input molecule inputMolecule(&amp;#34;Ben&amp;#34;) JdbcSQLException: Connection is broken: &amp;ldquo;java.net.ConnectException: Connection refused Datomic transactor is not running - please start it again.</description>
    </item>
    
  </channel>
</rss>
