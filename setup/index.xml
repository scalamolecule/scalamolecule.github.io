<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Molecule setup on Molecule</title>
    <link>http://www.scalamolecule.org/setup/</link>
    <description>Recent content in Molecule setup on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://www.scalamolecule.org/setup/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. Data Model</title>
      <link>http://www.scalamolecule.org/setup/data-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/setup/data-model/</guid>
      <description>Data Model Your Data Model is defined in a plain Scala file that you can have anywhere in your project. Molecule interprets this file and creates Molecule boilerplate code based on your Data Model so that you can write molecule queries with your domain terms.
For Molecule to recognize your Data Model, a simple Data Model definition DSL is imported. A Scala object with the name or your domain and &amp;ldquo;DataModel&amp;rdquo; added should contain your definitions:</description>
    </item>
    
    <item>
      <title>2. Sbt setup</title>
      <link>http://www.scalamolecule.org/setup/sbt-setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/setup/sbt-setup/</guid>
      <description>Sbt setup Once you have defined your Data Model, your sbt project needs to be set up to use Molecule.
MoleculePlugin The sbt MoleculePlugin generates Molecule boilerplate code when you compile your project.
Add the latest version of the plugin in project/buildinfo.sbt:
addSbtPlugin(&amp;#34;org.scalamolecule&amp;#34; % &amp;#34;sbt-molecule&amp;#34; % &amp;#34;1.0.0&amp;#34;) And add it to the project build.sbt file
lazy val yourProject = project.in(file(&amp;#34;app&amp;#34;)) .enablePlugins(MoleculePlugin) In ScalaJS projects, enable the plugin in the shared project:</description>
    </item>
    
    <item>
      <title>3.1 Db Connection, jvm</title>
      <link>http://www.scalamolecule.org/setup/jvm-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/setup/jvm-connection/</guid>
      <description>Database connection, jvm To use Molecule on the server/jvm side we need a few imports and a connection to a Datomic database.
Imports Import the Molecule api and the generated DSL for your Data Model
import molecule.datomic.api._ import app.dsl.yourDomain._ Also, choose a Datomic database system:
Peer The Datomic Peer runs in your application process.
import molecule.datomic.peer.facade.Datomic_Peer._ Peer Server The Datomic Peer Server runs on a remote server (could be local also).</description>
    </item>
    
    <item>
      <title>3.2 Db Connection, js</title>
      <link>http://www.scalamolecule.org/setup/js-connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.scalamolecule.org/setup/js-connection/</guid>
      <description>Database connection, js Molecule is fully implemented with Scala.js too. This allows us to transact and query data directly from the client/js side. Molecule calls are identical on both the server and client side and are therefore easy to refactor between the two platforms if needed.
Molecule transparently sends and retrieves data via ajax calls to the server and takes care of marshalling data back and forth with highly efficient Byte encoding/decoding using BooPickle.</description>
    </item>
    
  </channel>
</rss>
