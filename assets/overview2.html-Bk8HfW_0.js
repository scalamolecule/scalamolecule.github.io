import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as l,a as n,b as i,e as h,w as r,r as p,o as k}from"./app-CokjVCJL.js";const d={};function o(c,s){const a=p("RouteLink");return k(),t("div",null,[s[3]||(s[3]=l(`<h1 id="sql-libraries-overview" tabindex="-1"><a class="header-anchor" href="#sql-libraries-overview"><span>SQL libraries overview</span></a></h1><p>Current SQL libraries in the Scala ecosystem can be organised by the kind of code they are accessed with:</p><ul><li>Plain SQL</li><li>SQL-flavored DSL</li><li>Scala collection-style DSL</li></ul><p>Libraries in all 3 categories adapt to the semantics of SQL databases in various ways. One could say that &quot;your domain comes to the database&quot;.</p><p>Molecule flips this direction of attention and provides boilerplate code to <em><strong>&quot;let the database come to your domain&quot;</strong></em>.</p><p>Instead of writing code that access the database, you can <em>compose</em> your domain terms to form declarative and fully type-inferred molecules, or data models, of <em>what</em> data you&#39;re interested in. Molecule then translates that into <em>how</em> it is mutated/fetched with SQL.</p><h4 id="a-fourth-category" tabindex="-1"><a class="header-anchor" href="#a-fourth-category"><span>A fourth category</span></a></h4><p>By reversing the dynamics and taking this domain-declarative approach, Molecule places itself in a 4th category of SQL libraries for custom domain-tailored data composition.</p><p>Let&#39;s get an overview of libraries in the traditional 3 categories with a comparable small query just to get a feeling for the differences (each category sub page has more elaborate examples):</p><h2 id="_1-plain-sql-libraries" tabindex="-1"><a class="header-anchor" href="#_1-plain-sql-libraries"><span>1. Plain SQL libraries</span></a></h2><p>Libraries that let you write plain SQL directly with low-level control:</p><ul><li><a href="https://typelevel.org/doobie/index.html" target="_blank" rel="noopener noreferrer">Doobie</a></li><li><a href="https://github.com/AugustNagro/magnum" target="_blank" rel="noopener noreferrer">Magnum</a> (with additional repository methods)</li><li><a href="https://playframework.github.io/anorm/" target="_blank" rel="noopener noreferrer">Anorm</a></li><li><a href="https://typelevel.org/skunk/" target="_blank" rel="noopener noreferrer">Skunk</a></li></ul><p>SQL query that is the same for all 4 libraries:</p><div class="language-sql" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">age</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">street</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> Person </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">inner join</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> Address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">on</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">address</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">id</span></span></code></pre></div><p><a href="/database/compare/plain-sql">Compare</a> Molecule with plain SQL libraries...</p><h2 id="_2-sql-flavored-dsl-libraries" tabindex="-1"><a class="header-anchor" href="#_2-sql-flavored-dsl-libraries"><span>2. SQL-flavored DSL libraries</span></a></h2><p>Libraries that offer a DSL resembling SQL syntax, while ensuring type-safety:</p><p><a href="https://takapi327.github.io/ldbc/" target="_blank" rel="noopener noreferrer">ldbc</a></p><p>This example translates the above SQL query using ldbc, which treats case classes as table representations. The query is constructed with <code>join</code>, <code>on</code>, and <code>select</code>, mirroring SQL keywords:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TableQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .join(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TableQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .on((p, a) =&gt; p.id === a.id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .select((p, a) =&gt; p.name *: p.age *: a.street)</span></span></code></pre></div><p><a href="https://scalikejdbc.org" target="_blank" rel="noopener noreferrer">ScalikeJDBC</a></p><p>ScalikeJDBC wraps the query in a <code>withSQL</code> block, using a SQL-inspired DSL. It also requires setting up table syntax references beforehand:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.syntax(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;p&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.syntax(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">withSQL {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  select(p.result.name, p.result.age, a.result.street)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .from(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .innerJoin(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> as</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .on(p.addressId, a.id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}.map(rs =&gt; (rs.string(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), rs.int(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), rs.string(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .list</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .apply()</span></span></code></pre></div><p><a href="https://github.com/oyvindberg/typo" target="_blank" rel="noopener noreferrer">Typo</a></p><p>Typo uses code-generated classes to represent tables, enabling query building through a fluent API that mimics SQL structure:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> query</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.select</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .join(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).on(_.addressId, _.id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .map((p, a) =&gt; (p.name, p.age, a.street))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> query.run(transaction)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Using Skunk as the backend</span></span></code></pre></div><p><a href="https://www.squeryl.org" target="_blank" rel="noopener noreferrer">Squeryl (Java)</a></p><p>Squeryl builds queries in a for-comprehension-like structure using table references brought into scope with from. Table aliases <code>(p, a)</code> are used in the rest of the query:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">from(persons, addresses)((p, a) =&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  where(p.addressId === a.id)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    select((p.name, p.age, a.street))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre></div><p><a href="https://www.jooq.org" target="_blank" rel="noopener noreferrer">JOOQ (Java)</a> JOOQ builds queries with a fluent API directly representing SQL constructs. It uses generated table constants and types for full type safety:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Record3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;String, Integer, String&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> result </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  DSL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.using(configuration)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .select(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PERSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NAME</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PERSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">AGE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">STREET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .from(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PERSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .join(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).on(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PERSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ADDRESS_ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.eq(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ADDRESS</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ID</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    .fetch();</span></span></code></pre></div><p><a href="/database/compare/sql-dsl">Compare</a> Molecule with SQL-like DSL libraries...</p><h2 id="_3-scala-collection-style-dsl-libraries" tabindex="-1"><a class="header-anchor" href="#_3-scala-collection-style-dsl-libraries"><span>3. Scala collection-style DSL libraries</span></a></h2><p>Libraries that use Scala collection-like syntax to query SQL data:</p><p><a href="https://github.com/com-lihaoyi/scalasql" target="_blank" rel="noopener noreferrer">ScalaSql</a> ScalaSql defines tables with case classes and uses a mix of SQL- and Scala collection-inspired operations (<code>select</code>, <code>join</code>, <code>map</code>) to build queries in a familiar style:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.select.join(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)(_.id === _.personId)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .map { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p, a) =&gt; (p.name, p.age, a.street) }</span></span></code></pre></div><p><a href="https://scala-slick.org" target="_blank" rel="noopener noreferrer">Slick</a> Slick uses a table definition layer to create TableQuery objects (e.g. people, addresses). Queries are built with idiomatic Scala constructs that resemble collections:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(people join addresses on (_.id === _.addressId))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .map { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p, a) =&gt; (p.name, p.age, a.street) }</span></span></code></pre></div><p><a href="https://github.com/zio/zio-quill" target="_blank" rel="noopener noreferrer">Quill / ProtoQuill</a> Quill uses a quoted monadic comprehension to define queries. Tables are represented as case classes, and queries are constructed in for-comprehension style and translated at compile-time:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> q</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> quote {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    p &lt;- query[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    a &lt;- query[</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> p.addressId </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a.id</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">yield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (p.name, p.age, a.street)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> result</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> run(q)</span></span></code></pre></div><p><a href="/database/compare/collection-dsl">Compare</a> Molecule with Scala collection-like DSL libraries...</p><h2 id="_4-domain-tailored-composition-molecule" tabindex="-1"><a class="header-anchor" href="#_4-domain-tailored-composition-molecule"><span>4. Domain-tailored composition (Molecule)</span></a></h2><p>Libraries that compose queries declaratively from domain terms:</p><p>Once your domain structure is defined, Molecule generates a domain-tailored DSL. You then compose your query declaratively with minimal syntax noise, focusing only on what data your domain cares about:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-scala"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Molecule</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.name.age.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Address</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.street</span></span></code></pre></div><p>Molecule doesn’t just aim to reduce boilerplate. It shifts the mental model: from writing how to fetch data to declaring what data your domain cares about.</p>`,46)),n("p",null,[s[1]||(s[1]=i("Molecule is also the only SQL library in the Scala ecosystem that can insert and return ",-1)),h(a,{to:"/database/query/relationships.html#nested"},{default:r(()=>s[0]||(s[0]=[i("nested data",-1)])),_:1,__:[0]}),s[2]||(s[2]=i(".",-1))])])}const B=e(d,[["render",o]]),y=JSON.parse('{"path":"/database/compare/overview2.html","title":"SQL libraries overview","lang":"en-US","frontmatter":{"description":"SQL libraries overview Current SQL libraries in the Scala ecosystem can be organised by the kind of code they are accessed with: Plain SQL SQL-flavored DSL Scala collection-styl...","toc":{"levels":[2,3]},"head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SQL libraries overview\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-09T16:36:22.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/compare/overview2.html"}],["meta",{"property":"og:site_name","content":"Scala Molecule"}],["meta",{"property":"og:title","content":"SQL libraries overview"}],["meta",{"property":"og:description","content":"SQL libraries overview Current SQL libraries in the Scala ecosystem can be organised by the kind of code they are accessed with: Plain SQL SQL-flavored DSL Scala collection-styl..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-08-09T16:36:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-09T16:36:22.000Z"}]]},"git":{"createdTime":1754757382000,"updatedTime":1754757382000,"contributors":[{"name":"marcgrue","username":"marcgrue","email":"marcgrue@gmail.com","commits":1,"url":"https://github.com/marcgrue"}]},"filePathRelative":"database/compare/overview2.md","autoDesc":true}');export{B as comp,y as data};
