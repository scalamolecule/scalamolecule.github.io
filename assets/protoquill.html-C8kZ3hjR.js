import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as l,o as t}from"./app-B4NRs8wl.js";const e={};function n(h,s){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="protoquill" tabindex="-1"><a class="header-anchor" href="#protoquill"><span>ProtoQuill</span></a></h1><p>Compare <a href="https://github.com/zio/zio-protoquill?tab=readme-ov-file#tutorial" target="_blank" rel="noopener noreferrer">ProtoQuill Tutorial</a> code examples with molecules in the following sections.</p><p><em>The molecule examples use the simple synchronous api for brevity. <a href="/database/query/attributes#4-apis">Asynchronous/ZIO/cats.effect.IO</a> apis are also available.</em></p><h2 id="protoquill-setup" tabindex="-1"><a class="header-anchor" href="#protoquill-setup"><span>ProtoQuill Setup</span></a></h2><p>In ProtoQuill you need to define a context and a case class to represent your table in the database:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">case</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">age</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Int</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// SnakeCase turns firstName -&gt; first_name</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ctx</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> PostgresJdbcContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">SnakeCase</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;ctx&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> ctx._</span></span></code></pre></div><h2 id="molecule-setup" tabindex="-1"><a class="header-anchor" href="#molecule-setup"><span>Molecule Setup</span></a></h2><p>In Molecule you define things more in terms of your domain structure with Entities and their Attributes.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">object</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> People</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> DomainStructure</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">  trait</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneString</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">    val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">  =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> oneInt</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span></code></pre></div><p>From this model, Molecule generates</p><ul><li>An SQL schema that we can transact to create the database</li><li>Boilerplate code to write molecule queries and transactions</li></ul><h2 id="queries" tabindex="-1"><a class="header-anchor" href="#queries"><span>Queries</span></a></h2><p>ProtoQuill queries are built using inline quoted expressions.</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ProtoQuill</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> people</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> quote {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> joes</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> quote {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  people.filter(p =&gt; p.name </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">run(joes)</span></span></code></pre></div><p>This means that you will often over-fetch data with ProtoQuill if not all attribute values of a Table/case class are needed.</p><p>In Molecule you instead choose exactly which attributes you need and what order you want them in:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Molecule</span></span>
<span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.age.query.get</span></span></code></pre></div><h4 id="quotation" tabindex="-1"><a class="header-anchor" href="#quotation"><span>Quotation</span></a></h4><p>When dynamic parts are not present, ProtoQuill allows inline defs without quotation:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> people</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> joes</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> people.filter(p =&gt; p.name </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">run(joes)</span></span></code></pre></div><p>Whereas dynamic parts require quotation:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> people</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> quote {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> joes</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> quote {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  people.filter(p =&gt; p.name </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">run(joes)</span></span></code></pre></div><p>In Molecule, no quotation exists and filters are simply applied to the attribute:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age.query.get</span></span></code></pre></div><h2 id="insert" tabindex="-1"><a class="header-anchor" href="#insert"><span>Insert</span></a></h2><p>ProtoQuill batch queries with different entities</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">liftQuery(vips).foreach(v =&gt; query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">].insertValue(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(v.first </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> v.last, v.age)))</span></span></code></pre></div><p>Batch inserts in Molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.first.last.age.insert(vips.map(v =&gt; (v.first, v.last, v.age)))</span></span></code></pre></div><h2 id="update" tabindex="-1"><a class="header-anchor" href="#update"><span>Update</span></a></h2><p>ProtoQuill updates:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// batch queries with additional lifts</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">liftQuery(people)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .foreach(p =&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      .filter(p =&gt; p.age </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> lift(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      .contains(p.age)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  )</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .updateValue(p)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...even with additional liftQuery clauses!</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">liftQuery(people)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  .foreach(p =&gt;</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      .filter(p =&gt; p.age </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> lift(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> liftQuery(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)).contains(p.age))</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      .updateValue(p)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  )</span></span></code></pre></div><p>Molecule, update all with age &gt; 123</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.age_.</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">123</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).update(people.map(p =&gt; (p.first, p.last, p.age)))</span></span></code></pre></div><h2 id="query-meta" tabindex="-1"><a class="header-anchor" href="#query-meta"><span>Query Meta</span></a></h2><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> given</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> QueryMeta</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PersonName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  queryMeta(</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    quote {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">      (</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">q</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Query</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PersonName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">]) =&gt; q.map(p =&gt; p.name)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  )((</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">name</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) =&gt; </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PersonName</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(name))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">ctx.run(people)</span></span></code></pre></div><p>Molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name.query.get</span></span></code></pre></div><h2 id="shareable-code" tabindex="-1"><a class="header-anchor" href="#shareable-code"><span>Shareable Code</span></a></h2><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// case class Person(name: String, age: Int)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> onlyJoes</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E06C75;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> p.name </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;"> &quot;Joe&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">run(query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">].filter(p =&gt; onlyJoes(p)))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> people</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> ...</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> joes</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> people.filter(p =&gt; onlyJoes(p))</span></span></code></pre></div><p>Molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> onlyJoes</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.name(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> joes</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> onlyJoes.query.get</span></span></code></pre></div><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>Filter</span></a></h2><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> values</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> Map</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;firstName&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> -&gt; </span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;22&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#7F848E;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// filterByKeys uses lift so you need a context to use it</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">val</span><span style="--shiki-light:#E06C75;--shiki-dark:#E06C75;"> ctx</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;"> MirrorContext</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Literal</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">PostgresDialect</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> ctx._</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;">inline</span><span style="--shiki-light:#C678DD;--shiki-dark:#C678DD;"> def</span><span style="--shiki-light:#61AFEF;--shiki-dark:#61AFEF;"> q</span><span style="--shiki-light:#56B6C2;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;"> quote {</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">  query[</span><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">].filterByKeys(values)</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">run(q)</span></span></code></pre></div><p>Molecule:</p><div class="language-scala" data-highlighter="shiki" data-ext="scala" data-title="scala" style="--shiki-light:#abb2bf;--shiki-dark:#abb2bf;--shiki-light-bg:#282c34;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-dark-pro one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E5C07B;--shiki-dark:#E5C07B;">Person</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">.firstName(</span><span style="--shiki-light:#98C379;--shiki-dark:#98C379;">&quot;Joe&quot;</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).age(</span><span style="--shiki-light:#D19A66;--shiki-dark:#D19A66;">22</span><span style="--shiki-light:#ABB2BF;--shiki-dark:#ABB2BF;">).query.get</span></span></code></pre></div>`,46)]))}const B=i(e,[["render",n],["__file","protoquill.html.vue"]]),r=JSON.parse('{"path":"/database/compare/protoquill.html","title":"ProtoQuill","lang":"en-US","frontmatter":{"description":"ProtoQuill Compare ProtoQuill Tutorial code examples with molecules in the following sections. The molecule examples use the simple synchronous api for brevity. Asynchronous/ZIO...","head":[["meta",{"property":"og:url","content":"https://www.scalamolecule.org/intro/database/compare/protoquill.html"}],["meta",{"property":"og:site_name","content":"Molecule"}],["meta",{"property":"og:title","content":"ProtoQuill"}],["meta",{"property":"og:description","content":"ProtoQuill Compare ProtoQuill Tutorial code examples with molecules in the following sections. The molecule examples use the simple synchronous api for brevity. Asynchronous/ZIO..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-07-29T17:52:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-29T17:52:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ProtoQuill\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-29T17:52:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"ProtoQuill Setup","slug":"protoquill-setup","link":"#protoquill-setup","children":[]},{"level":2,"title":"Molecule Setup","slug":"molecule-setup","link":"#molecule-setup","children":[]},{"level":2,"title":"Queries","slug":"queries","link":"#queries","children":[]},{"level":2,"title":"Insert","slug":"insert","link":"#insert","children":[]},{"level":2,"title":"Update","slug":"update","link":"#update","children":[]},{"level":2,"title":"Query Meta","slug":"query-meta","link":"#query-meta","children":[]},{"level":2,"title":"Shareable Code","slug":"shareable-code","link":"#shareable-code","children":[]},{"level":2,"title":"Filter","slug":"filter","link":"#filter","children":[]}],"git":{"createdTime":1753811538000,"updatedTime":1753811538000,"contributors":[{"name":"marcgrue","email":"marcgrue@gmail.com","commits":1}]},"filePathRelative":"database/compare/protoquill.md","localizedDate":"July 29, 2025","autoDesc":true}');export{B as comp,r as data};
