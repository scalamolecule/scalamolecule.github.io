<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compare on Molecule</title>
    <link>http://scalamolecule.org/compare/</link>
    <description>Recent content in Compare on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 14 May 2014 02:13:50 +0000</lastBuildDate>
    
	<atom:link href="http://scalamolecule.org/compare/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Datomic</title>
      <link>http://scalamolecule.org/compare/datomic/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 +0000</pubDate>
      
      <guid>http://scalamolecule.org/compare/datomic/</guid>
      <description>Compare with Datomic/Datalog Even though Molecule is adapting to Datomic we&amp;rsquo;ll have a look the other way around to see how Datomic compares to Molecule.
Follow along in the code from which we will pick a few examples based on the Seattle tutorial examples.
Querying for attribute values The most basic query is to ask for entities with some attribute values:
// Datalog [:find ?b ?c (distinct ?d) :where [?</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>http://scalamolecule.org/compare/sql/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 +0000</pubDate>
      
      <guid>http://scalamolecule.org/compare/sql/</guid>
      <description>SQL vs. Molecule examples We&amp;rsquo;ll make a similar comparison to SQL as Slick does:
SELECT * sql&amp;quot;select * from PERSON&amp;quot;.as[Person].list  In molecule we would declare each attribute we are interested in also to infer the exact return type
val persons: Iterable[(String, Int)] = Person.name.age.get  SELECT sql&amp;quot;&amp;quot;&amp;quot; select AGE, concat(concat(concat(NAME,&#39; (&#39;),ID),&#39;)&#39;) from PERSON &amp;quot;&amp;quot;&amp;quot;.as[(Int,String)].list  With Molecule we would concatenate name and id with the returned result set:</description>
    </item>
    
    <item>
      <title>Slick</title>
      <link>http://scalamolecule.org/compare/sql/slick/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 +0000</pubDate>
      
      <guid>http://scalamolecule.org/compare/sql/slick/</guid>
      <description>Slick vs. Molecule examples Using examples from Slick:
Select all table values // Slick people.run  In molecule we would declare each attribute we are interested in also to infer the exact return type
// Molecule Person.name.age.get  Select certain columns people.map(p =&amp;gt; (p.age, p.name ++ &amp;quot; (&amp;quot; ++ p.id.asColumnOf[String] ++ &amp;quot;)&amp;quot;)).run  With Molecule we would concatenate name and id with the returned result set:
Person.age.name.e.get map { case (age, name, id) =&amp;gt; (age, s&amp;quot;$name ($id)&amp;quot; }  filter / WHERE people.</description>
    </item>
    
    <item>
      <title>Gremlin</title>
      <link>http://scalamolecule.org/compare/gremlin/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 +0000</pubDate>
      
      <guid>http://scalamolecule.org/compare/gremlin/</guid>
      <description>Gremlin vs. Molecule examples Let&amp;rsquo;s compare the queries/traversals in the Gremlin Getting Started Tutorial with equivalent Molecule queries.
For the examples we&amp;rsquo;ll use the same &amp;ldquo;Modern&amp;rdquo; graph as the tutorial:


Insert data Gremlin is untyped, so data is inserted directly in a generic way where &amp;ldquo;types&amp;rdquo; are created on-the-go:
Graph graph = TinkerGraph.open(); (1) Vertex marko = graph.addVertex(T.label, &amp;quot;person&amp;quot;, T.id, 1, &amp;quot;name&amp;quot;, &amp;quot;marko&amp;quot;, &amp;quot;age&amp;quot;, 29); (2) Vertex vadas = graph.</description>
    </item>
    
  </channel>
</rss>