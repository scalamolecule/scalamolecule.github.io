<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Molecule</title>
    <link>http://scalamolecule.github.io/</link>
    <description>Recent content on Molecule</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
    
    <lastBuildDate>Fri, 02 Jan 2015 22:06:44 CET</lastBuildDate>
    <atom:link href="http://scalamolecule.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Manual</title>
      <link>http://scalamolecule.github.io/manual/overview/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/manual/overview/</guid>
      <description>

&lt;h1 id=&#34;molecule-manual:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Molecule manual&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Setup&lt;/li&gt;
&lt;li&gt;Model&lt;/li&gt;
&lt;li&gt;Schema

&lt;ul&gt;
&lt;li&gt;Definition&lt;/li&gt;
&lt;li&gt;Types&lt;/li&gt;
&lt;li&gt;Options&lt;/li&gt;
&lt;li&gt;Enum values&lt;/li&gt;
&lt;li&gt;Modelling trategies&lt;/li&gt;
&lt;li&gt;Queries&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Indexes&lt;/li&gt;
&lt;li&gt;Optimization&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Reference?&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;FAQ&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Troubleshooting&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Overview&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Datomic&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Seattle&lt;/li&gt;
&lt;li&gt;Whirlwind of Datomic&lt;/li&gt;
&lt;li&gt;Day of Datomic&lt;/li&gt;
&lt;li&gt;MBrainz&lt;/li&gt;
&lt;li&gt;nuBank&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Web&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Entity ids&lt;/li&gt;
&lt;li&gt;Authorization&lt;/li&gt;
&lt;li&gt;REST?&lt;/li&gt;
&lt;li&gt;Pagination&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Graph&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Traversal&lt;/li&gt;
&lt;li&gt;Hyperedges&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Relationships&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Aggregates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Recursive queries (practical uses)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Schema queries (practical uses)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>http://scalamolecule.github.io/tutorials/overview/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/tutorials/overview/</guid>
      <description>

&lt;h1 id=&#34;molecule-tutorials:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Molecule tutorials&lt;/h1&gt;

&lt;p&gt;As we see more tutorials on Molecule we&amp;rsquo;ll collect them here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle&#34;&gt;Seattle tutorial&lt;/a&gt; - all-round introduction to using Molecule:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#0:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Basic introduction to Molecule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#1:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Queries with attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#4:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Relationships across references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#5:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Parameterized molecules for caching queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#6:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Functions and fulltext search in queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#8:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Querying with rules - logical OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#9:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Working with time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#10:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Inserting data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle/#11:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Updating/deleting data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wish-list for cookbook recipees (in random order):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Transaction management - saving meta data with your transactions&lt;/li&gt;
&lt;li&gt;Schema queries - what do we use them for?&lt;/li&gt;
&lt;li&gt;Pagination - how do we retrive paginated result sets?&lt;/li&gt;
&lt;li&gt;Authorization - roles and groups&lt;/li&gt;
&lt;li&gt;Recursive queries - examples and uses&lt;/li&gt;
&lt;li&gt;more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Compare</title>
      <link>http://scalamolecule.github.io/compare/overview/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/compare/overview/</guid>
      <description>

&lt;h1 id=&#34;compare-with-other-databases:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Compare with other databases&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;li&gt;SQL

&lt;ul&gt;
&lt;li&gt;Slick&lt;/li&gt;
&lt;li&gt;Sqltyped tutorial&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mongodb

&lt;ul&gt;
&lt;li&gt;Original&lt;/li&gt;
&lt;li&gt;Rogue tutorial&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Titan&lt;/li&gt;
&lt;li&gt;Neo4j&lt;/li&gt;
&lt;li&gt;Gremlin&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Community</title>
      <link>http://scalamolecule.github.io/community/overview/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/community/overview/</guid>
      <description>

&lt;h1 id=&#34;community:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Community&lt;/h1&gt;

&lt;h2 id=&#34;resources:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;[Molecule google list][moleculegroup] for questions and discussions about Molecule and other Scala-based Datomic resources&lt;/li&gt;
&lt;li&gt;[Issues][issues] - please feel free to raise issues/report bugs&lt;/li&gt;
&lt;li&gt;[Pull requests][pullrequests] are welcome&lt;/li&gt;
&lt;li&gt;[Datomic][datomic] website&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pellucidanalytics/datomisca&#34;&gt;Datomisca&lt;/a&gt;, a Scala API for Datomic&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Developer</title>
      <link>http://scalamolecule.github.io/developer/overview/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/developer/overview/</guid>
      <description>

&lt;h1 id=&#34;developer:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Developer&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Source code transformation&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example: to find&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Names of twitter/facebook_page communities in neighborhoods of southern districts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;we can compose a &amp;ldquo;molecule query&amp;rdquo; that is very close to our
human sentence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.`type`(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;)
  .Neighborhood.District.region(&amp;quot;sw&amp;quot; or &amp;quot;s&amp;quot; or &amp;quot;se&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Molecule transforms this at compile time (with macros) to a little more elaborate Datalog query string and
 input rules that finds those communities in the Datomic database:&lt;/p&gt;

&lt;pre&gt;
[:find ?a
 :in $ %
 :where
   [?ent :community/name ?a]
   (rule1 ?ent)
   [?ent :community/neighborhood ?c]
   [?c :neighborhood/district ?d]
   (rule2 ?d)]

INPUTS:
List(
  datomic.db.Db@xxx,
  [[[rule1 ?ent] [?ent :community/type &#34;:community.type/twitter&#34;]]
   [[rule1 ?ent] [?ent :community/type &#34;:community.type/facebook_page&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/sw&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/s&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/se&#34;]]]
)
&lt;/pre&gt;

&lt;h4 id=&#34;benefits:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Benefits&lt;/h4&gt;

&lt;p&gt;By not having to write such complex Datalog queries and rules &amp;ldquo;by hand&amp;rdquo;, Molecule
allows you to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type less&lt;/li&gt;
&lt;li&gt;Make type safe queries with inferred return types&lt;/li&gt;
&lt;li&gt;Use your domain terms directly as query building blocks&lt;/li&gt;
&lt;li&gt;Model complex queries intuitively (easier to understand and maintain)&lt;/li&gt;
&lt;li&gt;Reduce syntactic noise&lt;/li&gt;
&lt;li&gt;Focus more on your domain and less on queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;possible-drawbacks:68f80267fa3a50980dbb745a782b8dca&#34;&gt;Possible drawbacks&lt;/h4&gt;

&lt;p&gt;We still need to explore how far Molecule can match the expressive powers
 of Datalog. So far, all
 examples in the
[Seattle tutorial][seattle] have been
&amp;ldquo;molecularized&amp;rdquo; succesfully (see the
[Molecule Seattle tutorial][tutorial] and
[code][tutorialcode]). So as a proof-of-concept it looks promising&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Home</title>
      <link>http://scalamolecule.github.io/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/</guid>
      <description>

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h1 id=&#34;molecule:ffcff61ab3a11ef1d50900901a24ec54&#34;&gt;Molecule&lt;/h1&gt;

&lt;h4 id=&#34;write-powerful-datomic-queries-with-the-words-of-your-domain:ffcff61ab3a11ef1d50900901a24ec54&#34;&gt;&lt;strong&gt;&lt;em&gt;Write powerful &lt;a href=&#34;http://www.datomic.com&#34;&gt;Datomic&lt;/a&gt; queries with the words of your domain:&lt;/em&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;div id=&#34;myCarousel&#34; class=&#34;carousel slide&#34; data-interval=&#34;0&#34; data-ride=&#34;carousel&#34;&gt;
    &lt;!-- Carousel indicators --&gt;
    &lt;ol class=&#34;carousel-indicators&#34;&gt;
        &lt;li data-target=&#34;#myCarousel&#34; data-slide-to=&#34;0&#34; class=&#34;active&#34;&gt;&lt;/li&gt;
        &lt;li data-target=&#34;#myCarousel&#34; data-slide-to=&#34;1&#34;&gt;&lt;/li&gt;
        &lt;li data-target=&#34;#myCarousel&#34; data-slide-to=&#34;2&#34;&gt;&lt;/li&gt;
    &lt;/ol&gt;   
   &lt;!-- Carousel items --&gt;
    &lt;div class=&#34;carousel-inner&#34;&gt;
        &lt;div class=&#34;active item&#34;&gt;
            &lt;div class=&#34;carousel-caption&#34;&gt;                      
            
              &lt;h3&gt;Relationships&lt;/h3&gt;
              &lt;p&gt;Find Smith&#39;s in New York:&lt;/p&gt;
              &lt;pre&gt;&lt;code class=&#34;language-scala hljs&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt;.name(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Smith&#34;&lt;/span&gt;).&lt;span class=&#34;hljs-type&#34;&gt;Address&lt;/span&gt;.&lt;span class=&#34;hljs-type&#34;&gt;City&lt;/span&gt;.name(&lt;span class=&#34;hljs-string&#34;&gt;&#34;New York&#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
Note how bla bla
              
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;item&#34;&gt;
            &lt;div class=&#34;carousel-caption&#34;&gt;                   
            
              &lt;h3&gt;Graph traversals&lt;/h3&gt;
              &lt;p&gt;Find Collaborators of Collaborators of John Lennon:&lt;/p&gt;
              &lt;pre&gt;&lt;code class=&#34;language-scala hljs&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Artist&lt;/span&gt;.name(&lt;span class=&#34;hljs-string&#34;&gt;&#34;John Lennon&#34;&lt;/span&gt;).name.get
&lt;/code&gt;&lt;/pre&gt;
Note how bla bla
              
            &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class=&#34;item&#34;&gt;
            &lt;div class=&#34;carousel-caption&#34;&gt;                   
            
              &lt;h3&gt;Logic operations&lt;/h3&gt;
              &lt;p&gt;Apply conditional logic to attribute values&lt;/p&gt;
              &lt;pre&gt;&lt;code class=&#34;language-scala hljs&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Artist&lt;/span&gt;.name(&lt;span class=&#34;hljs-string&#34;&gt;&#34;Lisa&#34;&lt;/span&gt; or &lt;span class=&#34;hljs-string&#34;&gt;&#34;Linda&#34;&lt;/span&gt;).age.&amp;lt;(&lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;).get
&lt;/code&gt;&lt;/pre&gt;
Note how bla bla
              
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;!-- Carousel nav --&gt;
    &lt;a class=&#34;carousel-control left&#34; href=&#34;#myCarousel&#34; data-slide=&#34;prev&#34;&gt;
        &lt;span class=&#34;glyphicon glyphicon-chevron-left&#34;&gt;&lt;/span&gt;
    &lt;/a&gt;
    &lt;a class=&#34;carousel-control right&#34; href=&#34;#myCarousel&#34; data-slide=&#34;next&#34;&gt;
        &lt;span class=&#34;glyphicon glyphicon-chevron-right&#34;&gt;&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Molecule is a Scala meta-DSL that translates your &amp;ldquo;domain molecules&amp;rdquo; of attributes to queries for &lt;a href=&#34;http://www.datomic.com&#34;&gt;Datomic&lt;/a&gt; - the database of immutable facts.&lt;/p&gt;

&lt;h4 id=&#34;how-does-it-work:ffcff61ab3a11ef1d50900901a24ec54&#34;&gt;How does it work?&lt;/h4&gt;

&lt;p&gt;Our domain could have a &lt;code&gt;Person&lt;/code&gt; with attributes &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;age&lt;/code&gt; having a relationship to an &lt;code&gt;Address&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;trait Person {
  val name    = oneString
  val age     = oneInt
  val address = oneRef[Address]
} 

trait Address {
  val street = oneString
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this simple schema definition, Molecule generates the necessary code to compose intuitive and powerful queries - &lt;em&gt;your domain language becomes the query language:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Person.name.age.Address.street.get
Person.name(&amp;quot;Lisa&amp;quot;).age.get
Person.name(&amp;quot;Lisa&amp;quot;).age.&amp;lt;(18).get
Person.name(&amp;quot;Lisa&amp;quot; or &amp;quot;Linda&amp;quot;).age.Address.street.contains(&amp;quot;5th&amp;quot;).get
// etc..        
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we use type-interferred code to query for molecular combinations of atomic attributes we are guaranteed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Only make valid queries (won&amp;rsquo;t compile otherwise)&lt;/li&gt;
&lt;li&gt;Only get query results that satisfy our queries (no null checks etc)&lt;/li&gt;
&lt;li&gt;Always get type-interferred query results&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;get-started:ffcff61ab3a11ef1d50900901a24ec54&#34;&gt;Get started&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/home/introduction&#34;&gt;Introduction&lt;/a&gt; to Datomic/Molecule&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/manual/database-setup&#34;&gt;Setup Database&lt;/a&gt;: initiate a Datomic database and create a database schema with Molecule&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/manual/populate-database&#34;&gt;Populate Database&lt;/a&gt;: populate a Datomic database with Molecule&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalamolecule.github.io/tutorials/seattle&#34;&gt;Molecule Seattle tutorial&lt;/a&gt; examples of using Molecule (based on the
&lt;a href=&#34;http://docs.datomic.com/tutorial.html&#34;&gt;Datomic Seattle tutorial&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;download-code:ffcff61ab3a11ef1d50900901a24ec54&#34;&gt;Download code&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/scalamolecule/molecule.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Open in your IDE&lt;/li&gt;
&lt;li&gt;Run tests and poke around&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;try-demo:ffcff61ab3a11ef1d50900901a24ec54&#34;&gt;Try demo&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Seattle</title>
      <link>http://scalamolecule.github.io/tutorials/seattle/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/tutorials/seattle/</guid>
      <description>

&lt;h1 id=&#34;contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Molecule Seattle tutorial&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;A first query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Querying &lt;em&gt;for&lt;/em&gt; an attribute&amp;rsquo;s value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Querying &lt;em&gt;by&lt;/em&gt; attribute values&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Querying across references&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Parameterizing queries - input molecules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Invoking functions in queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Querying with fulltext search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Querying with rules - logical OR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Working with time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#10:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Insert data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#11:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Update and/or delete data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Credits: This tutorial is based on the original
&lt;a href=&#34;http://docs.datomic.com/tutorial.html&#34;&gt;Datomic Seattle tutorial&lt;/a&gt; and some text
passages have been quoted as-is or been slightly modified to describe
how Molecule works.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;0:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Introduction&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&#34;http://scalamolecule.github.io/manual/database-setup&#34;&gt;setting up the database&lt;/a&gt; and &lt;a href=&#34;http://scalamolecule.github.io/manual/populate-database&#34;&gt;populating it with data&lt;/a&gt; we can
start making queries. We make queries by building &amp;ldquo;molecules&amp;rdquo; which are
chains of attributes put together with the builder pattern. We can imagine
this as a 3-dimensional data structure of atoms bound together in various
patterns to build molecules&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;molecule-builder-pattern:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Molecule builder pattern&lt;/h3&gt;

&lt;p&gt;The first thing you do with Molecule is to define your domain namespaces and attributes in a
trait that defines namespaces with attributes for your domain:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;trait Community {
  val name = oneString.fullTextSearch
  val url  = oneString
  ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; field defines an attribute of type String with cardinality one. Adding the
&lt;code&gt;fullTextSearch&lt;/code&gt; option will tell Datomic that we want to be able to make fulltext
searches on the values of this attribute.&lt;/p&gt;

&lt;p&gt;After defining the schema like this, we run &lt;code&gt;sbt compile&lt;/code&gt; and Molecule will generate some
boilerplate traits that allow us to build molecules of our attributes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val nameUrls = m(Community.name.url).get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the &lt;code&gt;m&lt;/code&gt; method is implicit we can generally just write&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val nameUrls = Community.name.url.get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you look at the generated namespace code you&amp;rsquo;ll see that it is a
little more complex behind the scenes. That&amp;rsquo;s because we want our IDE
to be able to infer the type of each attribute. If we for instance had
an &lt;code&gt;age&lt;/code&gt; attribute of type &lt;code&gt;Int&lt;/code&gt; we could infer the return types of
calling the &lt;code&gt;get&lt;/code&gt; method on a molecule. That would return
a List of name/age tuples of type &lt;code&gt;Seq[(String, Int)]&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val nameAges: Seq[(String, Int)] = Community.name.age.get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A feature of Molecule is to omit the values of an attribute from the result set
by adding an underscore to the attribute name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val names: Seq[String] = Community.name.age_.get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is handy if we want to query for entities that we want to be sure have an age and
where we at the same time don&amp;rsquo;t need the age returned.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s follow along the
&lt;a href=&#34;http://docs.datomic.com/tutorial.html&#34;&gt;Datomic Seattle tutorial&lt;/a&gt; and
see how Molecule can perform the same queries.&lt;/p&gt;

&lt;h2 id=&#34;1:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; A first query&lt;/h2&gt;

&lt;p&gt;To find communities we can make a &lt;code&gt;communities&lt;/code&gt; molecule looking for entities with Community name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val communities = m(Community.name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this molecule at hand we can get the community names:
Or we can ask for the size of our returned data set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communities.get === // List of community names...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or we could check how many communities we have&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communities.get.size === 150
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we want the entity ids of our communities we can add the generic attribute &lt;code&gt;e&lt;/code&gt; to our molecule.
We might not be interested in the names but we want to make sure that we find entities having a name,
so we add the &lt;code&gt;name&lt;/code&gt; attribute with an underscore (to omit it from the result set):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.e.name_.get(3) === List(17592186045518L, 17592186045516L, 17592186045514L)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contents-3d29aefa7257f22b89227d9f373cd5f9-getting-an-entity-s-attribute-values:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Getting an entity&amp;rsquo;s attribute values&lt;/h2&gt;

&lt;p&gt;A way to get additional attribute values once we have an entity id is to &lt;code&gt;touch&lt;/code&gt; it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val communityId = Community.e.name_.get.head

// Use the community id to touch all the entity&#39;s attribute values
communityId.touch === Map(
  &amp;quot;:community/type&amp;quot; -&amp;gt; &amp;quot;:community.type/blog&amp;quot;,
  &amp;quot;:community/url&amp;quot; -&amp;gt; &amp;quot;http://eastballard.wordpress.com/&amp;quot;,
  &amp;quot;:community/category&amp;quot; -&amp;gt; List(&amp;quot;news&amp;quot;, &amp;quot;events&amp;quot;, &amp;quot;meeting&amp;quot;, &amp;quot;community association&amp;quot;),
  &amp;quot;:community/orgtype&amp;quot; -&amp;gt; &amp;quot;:community.orgtype/community&amp;quot;,
  &amp;quot;:db/id&amp;quot; -&amp;gt; 17592186045520L,
  &amp;quot;:community/name&amp;quot; -&amp;gt; &amp;quot;East Ballard Community Association Blog&amp;quot;,
  &amp;quot;:community/neighborhood&amp;quot; -&amp;gt; Map(
    &amp;quot;:db/id&amp;quot; -&amp;gt; 17592186045456L,
    &amp;quot;:neighborhood/district&amp;quot; -&amp;gt; Map(
      &amp;quot;:db/id&amp;quot; -&amp;gt; 17592186045457L,
      &amp;quot;:district/name&amp;quot; -&amp;gt; &amp;quot;Ballard&amp;quot;,
      &amp;quot;:district/region&amp;quot; -&amp;gt; &amp;quot;:district.region/nw&amp;quot;),
    &amp;quot;:neighborhood/name&amp;quot; -&amp;gt; &amp;quot;Ballard&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also retrive attribute values one by one by simply applying an attribute name to the entity id:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communityId(&amp;quot;:community/name&amp;quot;) === Some(&amp;quot;East Ballard Community Association Blog&amp;quot;)
communityId(&amp;quot;:community/url&amp;quot;) === Some(&amp;quot;http://eastballard.wordpress.com/&amp;quot;)
communityId(&amp;quot;:community/category&amp;quot;) === Some(List(&amp;quot;news&amp;quot;, &amp;quot;events&amp;quot;, &amp;quot;meeting&amp;quot;, &amp;quot;community association&amp;quot;))
communityId(&amp;quot;:community/emptyOrBogusAttribute&amp;quot;) === None
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Querying &lt;em&gt;for&lt;/em&gt; an attribute&amp;rsquo;s value&lt;/h2&gt;

&lt;p&gt;After defining a molecule like &lt;code&gt;Community.name&lt;/code&gt; we can call the &lt;code&gt;get&lt;/code&gt;
method on it to retrieve values that matches it. When there&amp;rsquo;s only one
attribute defined in the molecule we&amp;rsquo;ll get a list of this attribute&amp;rsquo;s
value back.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.get(3) === List(
  &amp;quot;Capitol Hill Triangle&amp;quot;,
  &amp;quot;Miller Park Neighborhood Association&amp;quot;,
  &amp;quot;Capitol Hill Community Council&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If our molecule defines two or more attributes we&amp;rsquo;ll get tuples of
values back.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.url.get(3) === List(
  (&amp;quot;Chinatown/International District&amp;quot;, &amp;quot;http://www.cidbia.org/&amp;quot;),
  (&amp;quot;All About Belltown&amp;quot;, &amp;quot;http://www.belltown.org/&amp;quot;),
  (&amp;quot;Friends of Discovery Park&amp;quot;, &amp;quot;http://www.friendsdiscoverypark.org/&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can choose to get the same data back with the &lt;code&gt;hl&lt;/code&gt; method as Shapeless
HLists where each element has its own type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.url.hl(3) === List(
  &amp;quot;Chinatown/International District&amp;quot; :: &amp;quot;http://www.cidbia.org/&amp;quot; :: HNil,
  &amp;quot;All About Belltown&amp;quot; :: &amp;quot;http://www.belltown.org/&amp;quot; :: HNil,
  &amp;quot;Friends of Discovery Park&amp;quot; :: &amp;quot;http://www.friendsdiscoverypark.org/&amp;quot; :: HNil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This gives us access to a wide range of &lt;a href=&#34;https://github.com/milessabin/shapeless/blob/master/core/src/test/scala/shapeless/hlist.scala&#34;&gt;useful functions of HLists&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Querying &lt;em&gt;by&lt;/em&gt; attribute values&lt;/h2&gt;

&lt;p&gt;When applying a value to an attribute we narrow the selection of
entities that will match our molecule data structure. Let&amp;rsquo;s find communities
of type &amp;ldquo;twitter&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.`type`(&amp;quot;twitter&amp;quot;).get(3) === List(
  (&amp;quot;Discover SLU&amp;quot;, &amp;quot;twitter&amp;quot;),
  (&amp;quot;Magnolia Voice&amp;quot;, &amp;quot;twitter&amp;quot;),
  (&amp;quot;MyWallingford&amp;quot;, &amp;quot;twitter&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(We use the back-ticks to avoid having Scala to think of &lt;code&gt;type&lt;/code&gt;
as a Scala keyword)&lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;type&lt;/code&gt; will always be &amp;ldquo;twitter&amp;rdquo; we could omit it from the result set
by adding an underscore to the &lt;code&gt;type&lt;/code&gt; attribute (and we don&amp;rsquo;t need the back-ticks anymore).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.type_(&amp;quot;twitter&amp;quot;).get(3) === List(
  &amp;quot;Discover SLU&amp;quot;, &amp;quot;Fremont Universe&amp;quot;, &amp;quot;Columbia Citizens&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that we get some different communities. We are not guaranteed a specific order
of returned values and the first 3 values can therefore vary as we see here even though
the molecules/queries are similar.&lt;/p&gt;

&lt;p&gt;In most of our examples we supply static data like &amp;ldquo;twitter&amp;rdquo; but even
though our molecules are created at compile time we can even supply
data as variables like we would do with user input from forms etc.
So we could as well write the following and get the same result.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val tw = &amp;quot;twitter&amp;quot;
Community.name.type_(tw).get(3) === List(
  &amp;quot;Discover SLU&amp;quot;, &amp;quot;Fremont Universe&amp;quot;, &amp;quot;Columbia Citizens&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieving values of many-attributes like &lt;code&gt;category&lt;/code&gt; gives us sets
of values back&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name_(&amp;quot;belltown&amp;quot;).category.one === Set(&amp;quot;events&amp;quot;, &amp;quot;news&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we often want a single result back, Molecule supplies a &lt;code&gt;one&lt;/code&gt; convenience method that calls &lt;code&gt;get.head&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can apply multiple values to many-attributes like &lt;code&gt;category&lt;/code&gt; and
it will match entities having any of those values (OR-semantics).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.category_(&amp;quot;news&amp;quot;, &amp;quot;arts&amp;quot;).get(3) === List(
  &amp;quot;Capitol Hill Community Council&amp;quot;,
  &amp;quot;KOMO Communities - Rainier Valley&amp;quot;,
  &amp;quot;Discover SLU&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;4:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Querying across references&lt;/h2&gt;

&lt;p&gt;The sample data model includes three main entity types communities,
neighborhoods and districts that are related to each other with references.
Molecule lets you traverse those references by going from one namespace
to the next. Let&amp;rsquo;s find communities in the noth-eastern region:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.Neighborhood.District.region_(&amp;quot;ne&amp;quot;).get(3) === List(
  &amp;quot;KOMO Communities - U-District&amp;quot;,
  &amp;quot;Maple Leaf Community Council&amp;quot;,
  &amp;quot;KOMO Communities - View Ridge&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or comunity names and their region:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.Neighborhood.District.region.get(3) === List(
  (&amp;quot;Broadview Community Council&amp;quot;, &amp;quot;sw&amp;quot;),
  (&amp;quot;KOMO Communities - Green Lake&amp;quot;, &amp;quot;sw&amp;quot;),
  (&amp;quot;Friends of Frink Park&amp;quot;, &amp;quot;e&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;5:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Parameterizing queries - input molecules&lt;/h2&gt;

&lt;p&gt;When you apply values to molecules, the resulting query
string is cached by Datomic. If you keep varying the string content,
the cache is not effective. To take advantage of query caching it is
recommended to make parameterized queries that can be cached once and
used with varying input parameters.&lt;/p&gt;

&lt;h3 id=&#34;single-input-value-for-an-attribute:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Single input value for an attribute&lt;/h3&gt;

&lt;p&gt;Instead of applying the constant value &amp;ldquo;twitter&amp;rdquo; to a molecule
&lt;code&gt;Community.type(&amp;quot;twitter&amp;quot;)&lt;/code&gt; we can use the &lt;code&gt;?&lt;/code&gt; input placeholder
in an &amp;ldquo;input molecule&amp;rdquo; telling us that it waits for an input value.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val communitiesOfType = m(Community.name.type_(?))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When can then apply different input values to our input molecule:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val twitterCommunities = communitiesOfType(&amp;quot;twitter&amp;quot;)
val facebookCommunities = communitiesOfType(&amp;quot;facebook_page&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Those two molecules re-use the same cached query and just apply
different input values. Now we can more efficiently get out results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;twitterCommunities.get(3) === List(
  &amp;quot;Discover SLU&amp;quot;, &amp;quot;Fremont Universe&amp;quot;, &amp;quot;Columbia Citizens&amp;quot;)
  
facebookCommunities.get(3) === List(
  &amp;quot;Discover SLU&amp;quot;, &amp;quot;Blogging Georgetown&amp;quot;, &amp;quot;Fremont Universe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we omit the underscore we can get the type too&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val communitiesWithType = m(Community.name.`type`(?))

communitiesWithType(&amp;quot;twitter&amp;quot;).get(3) === List(
  (&amp;quot;Magnolia Voice&amp;quot;, &amp;quot;twitter&amp;quot;),
  (&amp;quot;Discover SLU&amp;quot;, &amp;quot;twitter&amp;quot;),
  (&amp;quot;MyWallingford&amp;quot;, &amp;quot;twitter&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiple-input-values-for-an-attribute-logical-or:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Multiple input values for an attribute - logical OR&lt;/h3&gt;

&lt;p&gt;Find communities of type &amp;ldquo;facebook_page&amp;rdquo; OR &amp;ldquo;twitter&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communitiesWithType(&amp;quot;facebook_page&amp;quot; or &amp;quot;twitter&amp;quot;).get(3) === List(
  (&amp;quot;Fremont Universe&amp;quot;, &amp;quot;facebook_page&amp;quot;),
  (&amp;quot;Fauntleroy Community Association&amp;quot;, &amp;quot;facebook_page&amp;quot;),
  (&amp;quot;Discover SLU&amp;quot;, &amp;quot;twitter&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternative syntaxes where comma-separations act as logical OR:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communitiesWithType(&amp;quot;facebook_page&amp;quot;, &amp;quot;twitter&amp;quot;)
communitiesWithType(Seq(&amp;quot;facebook_page&amp;quot;, &amp;quot;twitter&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tuple-of-input-values-for-multiple-attributes-logical-and:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Tuple of input values for multiple attributes - logical AND&lt;/h3&gt;

&lt;p&gt;In addition to passing multiple values for a single attribute, you
can pass a tuple of values for multiple attributes ensuring that both
values are present.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val typeAndOrgtype = m(Community.name.type_(?).orgtype_(?))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this input molecule we can find communities that are of &lt;code&gt;type&lt;/code&gt;
&amp;ldquo;email_list&amp;rdquo; AND &lt;code&gt;orgtype&lt;/code&gt; &amp;ldquo;community&amp;rdquo;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;typeAndOrgtype(&amp;quot;email_list&amp;quot; and &amp;quot;community&amp;quot;).get(3) === List(
  &amp;quot;Greenwood Community Council Announcements&amp;quot;,
  &amp;quot;Madrona Moms&amp;quot;,
  &amp;quot;Ballard Neighbor Connection&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The order of arguments in the logical AND expression will correspond
to the order of the input placeholders in the input molecule so that
&amp;ldquo;email_list&amp;rdquo; corresponds to &lt;code&gt;type_(?)&lt;/code&gt; and &amp;ldquo;community&amp;rdquo; corresponds to
&lt;code&gt;community_(?)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Arguments in expressions are also type-checked against the expected
types of the corresponding attributes. Our IDE would infer that the
&lt;code&gt;orgtype&lt;/code&gt; attribute doesn&amp;rsquo;t expect an &lt;code&gt;Int&lt;/code&gt; as the second argument if we
were to pass the expression &amp;ldquo;email_list and 42&amp;rdquo;. This helps us avoid
populating our database with unexpected data.&lt;/p&gt;

&lt;p&gt;We can express logical AND expressions with a list of arguments too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// AND-semantics given an input molecule expecting 2 inputs!
typeAndOrgtype(&amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or we can pass a list of arguments. IMPORTANT: note how the semantics
of a list of arguments change compared to the OR semantics that we
saw with the single-input molecule above that had OR-semantics. When
we have multiple inputs the semantics change to AND-semantics!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// AND-semantics given an input molecule expecting 2 inputs!
typeAndOrgtype(Seq((&amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;multiple-tuples-of-input-values-for-multiple-attributes-logical-and-or:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Multiple tuples of input values for multiple attributes - logical AND/OR&lt;/h3&gt;

&lt;p&gt;We can also ask for alternative tuples of data structures. Since the
input values can then vary, we could ask our molecule to return the
input values too.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val typeAndOrgtype2 = m(Community.name.`type`(?).orgtype(?))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s ask for email-list communities OR commercial website
communities. Note how this combines logical AND and OR.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;typeAndOrgtype2(
  (&amp;quot;email_list&amp;quot; and &amp;quot;community&amp;quot;) or 
  (&amp;quot;website&amp;quot; and &amp;quot;commercial&amp;quot;)
).get(5) === List(
  (&amp;quot;Madrona Moms&amp;quot;, &amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;),
  (&amp;quot;Broadview Community Council&amp;quot;, &amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;),
  (&amp;quot;Greenwood Community Council Discussion&amp;quot;, &amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;),
  (&amp;quot;Alki News&amp;quot;, &amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;),
  (&amp;quot;Discover SLU&amp;quot;, &amp;quot;website&amp;quot;, &amp;quot;commercial&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As usual we can use alternative syntaxes as well. Here we group the
AND expression arguments as tuple values. Comma-separations between
the tuples act as logical OR.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// ((a AND b) OR (c AND d))
typeAndOrgtype2((&amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;), (&amp;quot;website&amp;quot;, &amp;quot;commercial&amp;quot;))
typeAndOrgtype2(Seq((&amp;quot;email_list&amp;quot;, &amp;quot;community&amp;quot;), (&amp;quot;website&amp;quot;, &amp;quot;commercial&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;6:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Invoking functions in queries&lt;/h2&gt;

&lt;p&gt;Datomic lets you invoke functions in queries. Molecule use this to
apply comparison operations on attribute values. Here we can for
instance find communities whose &lt;code&gt;name&lt;/code&gt; come before &amp;ldquo;C&amp;rdquo; in
alphabetical order.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;m(Community.name &amp;lt; &amp;quot;C&amp;quot;).get(3) === List(
  &amp;quot;ArtsWest&amp;quot;, &amp;quot;All About South Park&amp;quot;, &amp;quot;Ballard Neighbor Connection&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how we use the &lt;code&gt;m&lt;/code&gt; method here to allow the postfix notation
(spaces around &lt;code&gt;&amp;lt;&lt;/code&gt;). Alternatively you can call the &lt;code&gt;&amp;lt;&lt;/code&gt; method
explicitly if you prefer this syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.&amp;lt;(&amp;quot;C&amp;quot;).get(3) === List(
  &amp;quot;ArtsWest&amp;quot;, &amp;quot;All About South Park&amp;quot;, &amp;quot;Ballard Neighbor Connection&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also parameterize the molecule.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val communitiesBefore = m(Community.name &amp;lt; ?)

communitiesBefore(&amp;quot;C&amp;quot;).get(3) === List(
  &amp;quot;ArtsWest&amp;quot;, &amp;quot;All About South Park&amp;quot;, &amp;quot;Ballard Neighbor Connection&amp;quot;)
  
communitiesBefore(&amp;quot;A&amp;quot;).get(3) === List(&amp;quot;15th Ave Community&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;7:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Querying with fulltext search&lt;/h2&gt;

&lt;p&gt;Datomic supports fulltext searching. When you define an attribute
of string value, you can indicate whether it should be indexed for
fulltext search. For instance Community &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;category&lt;/code&gt; have
the fulltextSearch option defined in the Seattle schema. Let&amp;rsquo;s find
communities with &amp;ldquo;Wallingford&amp;rdquo; in the name.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;(Community.name contains &amp;quot;Wallingford&amp;quot; take 3) === List(
  &amp;quot;KOMO Communities - Wallingford&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can parameterize fulltext searches too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val communitiesWith = m(Community.name contains ?)

(communitiesWith(&amp;quot;Wallingford&amp;quot;) take 3) === List(
  &amp;quot;KOMO Communities - Wallingford&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fulltext-search-on-many-cardinality-attributes:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Fulltext search on many-cardinality attributes&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;category&lt;/code&gt; attribute can have several values so when we do a
fulltext search on its values we&amp;rsquo;ll get back a set of its values
that match our seed. We can also combine fulltext search with other
constraints. Here we look for website communities with a &lt;code&gt;category&lt;/code&gt;
containing the word &amp;ldquo;food&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;m(Community.name.type_(&amp;quot;website&amp;quot;).category contains &amp;quot;food&amp;quot;).get(3) === List(
  (&amp;quot;Community Harvest of Southwest Seattle&amp;quot;, Set(&amp;quot;sustainable food&amp;quot;)), 
  (&amp;quot;InBallard&amp;quot;, Set(&amp;quot;food&amp;quot;))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And parameterized:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val typeAndCategory = m(Community.name.type_(?).category contains ?)

typeAndCategory(&amp;quot;website&amp;quot;, Set(&amp;quot;food&amp;quot;)).get(3) === List(
  (&amp;quot;Community Harvest of Southwest Seattle&amp;quot;, Set(&amp;quot;sustainable food&amp;quot;)), 
  (&amp;quot;InBallard&amp;quot;, Set(&amp;quot;food&amp;quot;))
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how the values of the &lt;code&gt;category&lt;/code&gt; attribute are now returned
since they can vary across the result set contrary to the &lt;code&gt;type&lt;/code&gt;
attribute which is not since it will have the same value for all
matches.&lt;/p&gt;

&lt;h2 id=&#34;8:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Querying with rules - logical OR&lt;/h2&gt;

&lt;p&gt;Datomic rules are named groups of Datomic clauses that can be
plugged into Datomic queries. As a Molecule user you don&amp;rsquo;t need to
know about rules since Molecule automatically translates your logic
to Datomic rules.&lt;/p&gt;

&lt;p&gt;We can for instance find social media communities with a
logical OR expresion:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.type_(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;).get(3) === List(
  &amp;quot;Discover SLU&amp;quot;, &amp;quot;Blogging Georgetown&amp;quot;, &amp;quot;Fremont Universe&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip; or find communities in the NE or SW regions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.Neighborhood.District.region_(&amp;quot;ne&amp;quot; or &amp;quot;sw&amp;quot;).get(3) === List(
  &amp;quot;Greenwood Community Council Announcements&amp;quot;, 
  &amp;quot;Maple Leaf Community Council&amp;quot;, 
  &amp;quot;Genesee-Schmitz Neighborhood Council&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can combine them to find social-media communities in
southern regions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val southernSocialMedia = List(
  &amp;quot;Blogging Georgetown&amp;quot;,
  &amp;quot;Columbia Citizens&amp;quot;,
  &amp;quot;MyWallingford&amp;quot;,
  &amp;quot;Fauntleroy Community Association&amp;quot;)

Community.name.type_(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;)
  .Neighborhood
  .District.region_(&amp;quot;sw&amp;quot; or &amp;quot;s&amp;quot; or &amp;quot;se&amp;quot;).get === southernSocialMedia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s parameterized the same query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val typeAndRegion = m(Community.name.type_(?).Neighborhood.District.region_(?))

typeAndRegion(
  (&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;) and 
  (&amp;quot;sw&amp;quot; or &amp;quot;s&amp;quot; or &amp;quot;se&amp;quot;)
).get === southernSocialMedia

// or
typeAndRegion(
  Seq(&amp;quot;twitter&amp;quot;, &amp;quot;facebook_page&amp;quot;), 
  Seq(&amp;quot;sw&amp;quot;, &amp;quot;s&amp;quot;, &amp;quot;se&amp;quot;)
).get === southernSocialMedia
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how this syntax for the ((a OR b) AND (c OR d)) expression
is different from the syntax we had earlier in the section
&amp;ldquo;Multiple tuples of input values for multiple attributes&amp;rdquo; where
we had a ((a AND b) OR (c AND d)) expression.&lt;/p&gt;

&lt;h2 id=&#34;9:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Working with time&lt;/h2&gt;

&lt;p&gt;All of the query results shown in the previous two sections were
based on the initial seed data we loaded into our database. The
data hasn&amp;rsquo;t changed since then. In this section we&amp;rsquo;ll load some
more data, and explain how to work with database values from
different moments in time.&lt;/p&gt;

&lt;h3 id=&#34;time-is-built-in:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Time is built in&lt;/h3&gt;

&lt;p&gt;One of the key concepts in Datomic is that new facts don&amp;rsquo;t replace
old facts. Instead, by default, the system keeps track of all the
facts, forever. This makes it possible to look at the database as
it was at a certain point in time, or at the changes since a certain
point in time.&lt;/p&gt;

&lt;p&gt;When you submit a transaction to a database, Datomic keeps track
of the entities, attributes and values you add or retract. It also
keeps track of the transaction itself. Transactions are entities
in their own right, and you can write queries to find them.
The system associates one attribute with each transaction entity,
Db.txInstant, which records the time the transaction was processed.&lt;/p&gt;

&lt;p&gt;Molecule has a &lt;code&gt;Db&lt;/code&gt; namespace with a &lt;code&gt;txInstant&lt;/code&gt; attribute that
we can use to query for transactions instants (represented as
java.util.Date instances) that has been created. We&amp;rsquo;ve only
executed two transactions, but the earlier system executed a
few as part of its bootstrapping process. We know, though, that
our two are the most recent. The code below uses a &lt;code&gt;Db.txInstant&lt;/code&gt;
molecule to retrieve transaction times, sort them into reverse
chronological order, and store the most recent two as dataTxDate
and schemaTxDate, when we added our data and our schema, respectively.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val txDates = Db.txInstant.get(2).sorted.reverse
val dataTxDate = txDates(0)
val schemaTxDate = txDates(1)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;revisiting-the-past-asof-pastdate:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Revisiting the past - asOf(PastDate)&lt;/h3&gt;

&lt;p&gt;Once we have the relevant transaction times, we can look at the
database as of that point in time. To do this, we retrieve the
current database value by calling the molecule method &lt;code&gt;asOf&lt;/code&gt;,
passing in the Date we&amp;rsquo;re interested in. The &lt;code&gt;asOf&lt;/code&gt; method
returns a new molecule based on the database value that is
&amp;ldquo;rewound&amp;rdquo; back to the requested date.&lt;/p&gt;

&lt;p&gt;An example will help make this clear. The code below gets the
value of the database as of our schema transaction. Then it
runs our very first query, which retrieves entities representing
communities, and prints the size of the results. Because we&amp;rsquo;re
using a database value from before we ran the transaction to
load seed data, the size is 0.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communities.asOf(schemaTxDate).size === 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we do the same thing using the date of our seed data
transaction, the query returns 150 results, because as of
that moment, the seed data is there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communities.asOf(dataTxDate).size === 150
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;changes-since-a-date-since-comparedate:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Changes since a date - since(compareDate)&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;asOf&lt;/code&gt; method allows us to look at a database value
containing data changes up to a specific point in time.
There is another method &lt;code&gt;since&lt;/code&gt; that allows us to look at
a database value containing data changes since a specific
point in time.&lt;/p&gt;

&lt;p&gt;The code below gets the value of the database since our
schema transaction and counts the number of communities.
Because we&amp;rsquo;re using a database value containing changes
made since we ran the transaction to load our schema -
including the changes made when we loaded our seed data -
the size is 150.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communities.since(schemaTxDate).size === 150
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we do the same thing using the date of our seed data
transaction, the query returns 0 results, because we haven&amp;rsquo;t
added any communities since that time.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;communities.since(dataTxDate).size === 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While we passed specific transaction dates to &lt;code&gt;asOf&lt;/code&gt;
and &lt;code&gt;since&lt;/code&gt;, you can pass any date. The system find the
closest relevant transaction and use that as the basis for
filtering.&lt;/p&gt;

&lt;p&gt;Keeping track of data over time is a very powerful feature.
However, there may be some data you don&amp;rsquo;t want to keep old
versions of. You can control whether old versions are kept
on a per-attribute basis by adding &lt;code&gt;noHistory&lt;/code&gt; to your
attribute definition when you create your schema. If you
choose not to keep history for a given attribute and you
look at a database as of a time before the most recent change
to a given entity&amp;rsquo;s value for that attribute, you will not
find any value for it.&lt;/p&gt;

&lt;h3 id=&#34;imagining-the-future-imagine-futuredate:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Imagining the future - imagine(FutureDate)&lt;/h3&gt;

&lt;p&gt;Revisiting the past is a very powerful feature. It&amp;rsquo;s also
possible to imagine the future. The &lt;code&gt;asOf&lt;/code&gt; and &lt;code&gt;since&lt;/code&gt;
methods work by removing data from the current database value.
You can also &lt;em&gt;add&lt;/em&gt; data to a database value, using the
Molecule method &lt;code&gt;imagine&lt;/code&gt; (called &lt;code&gt;with&lt;/code&gt; in Datomic).
The result is a database value that&amp;rsquo;s been modified without
submitting a transaction and changing the data stored
in the system. The modified database value can be used to
execute queries, allowing you to perform &amp;ldquo;what if&amp;rdquo;
calculations before committing to data changes.&lt;/p&gt;

&lt;p&gt;We can explore this feature using a second seed data file
provided with the sample application,
&amp;ldquo;samples/seattle/seattle-data1.edn&amp;rdquo;. The code below reads
it into a list.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val data_rdr2 = new FileReader(&amp;quot;examples/resources/seattle/seattle-data1a.dtm&amp;quot;)
val newDataTx = Util.readAll(data_rdr2).get(0).asInstanceOf[java.util.List[Object]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once we have this new data transaction, we can build a
database value that includes it. To do that, we simply
get the current database value (or one as of or since a
point in time) and call &lt;code&gt;imagine&lt;/code&gt;, passing in the
transaction data. &lt;code&gt;imagine&lt;/code&gt; returns a molecule based on
the new value of the database after the new data is added.
If we execute our community counting query against it,
we get 258 results.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// future db
communities.imagine(newDataTx).size === 258
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The actual data hasn&amp;rsquo;t changed yet, so if we query the
current database value, we still get 150 results. We won&amp;rsquo;t
see a change in the current database value until we submit
the new transaction. After that, querying the current
database value returns 258 results. Finally, if we get
another database value containing data since our first
seed data transaction ran, and query for communities we
get 108 results, the number added by new data transaction.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// existing db
communities.size === 150

// transact
conn.transact(newDataTx)

// updated db
communities.size === 258

// number of new transactions
communities.since(dataTxDate).size === 108
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;10:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Insert data&lt;/h2&gt;

&lt;p&gt;You can add data in two ways with Molecule:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Build a molecule with data and insert&lt;/li&gt;
&lt;li&gt;Use a molecule template to insert matching data&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;data-molecule-with-values:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&amp;ldquo;Data-molecule&amp;rdquo; with values&lt;/h3&gt;

&lt;p&gt;To insert a single data structure you can populate a
molecule with values and then &lt;code&gt;add&lt;/code&gt; it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community
  .name(&amp;quot;AAA&amp;quot;)
  .url(&amp;quot;myUrl&amp;quot;)
  .`type`(&amp;quot;twitter&amp;quot;)
  .orgtype(&amp;quot;personal&amp;quot;)
  .category(&amp;quot;my&amp;quot;, &amp;quot;favorites&amp;quot;)
  .Neighborhood.name(&amp;quot;myNeighborhood&amp;quot;)
  .District.name(&amp;quot;myDistrict&amp;quot;).region(&amp;quot;nw&amp;quot;).add.ids === List(
    17592186045785L, 17592186045786L, 17592186045787L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how we can add values for referenced namespaces and multiple values for
cardinality-many attributes like &lt;code&gt;category&lt;/code&gt; - all in one go!&lt;/p&gt;

&lt;p&gt;Apart from the new Community entity two more entities are also added. Since
neither &amp;ldquo;myNeighborhood&amp;rdquo; nor &amp;ldquo;myDistrict&amp;rdquo; exist they are created to so that
we can reference them.&lt;/p&gt;

&lt;p&gt;In Datomic there is no requirement that we add a &amp;ldquo;complete&amp;rdquo;
set of namespace attributes to create an entity. For instance, we could add
a community only with &lt;code&gt;Community.name(&amp;quot;My community&amp;quot;).add&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;insert-molecule-matching-values:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&amp;ldquo;Insert-molecule&amp;rdquo; + matching values&lt;/h3&gt;

&lt;p&gt;A more efficient way to add larger sets of data is to define an
&amp;ldquo;Insert-Molecule&amp;rdquo; that models the data structure we
want to insert into the database. Note how we call the &lt;code&gt;insert&lt;/code&gt; method
to define it as an Input-Molecule:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val insertCommunity = m(
  Community.name.url.`type`.orgtype.category
    .Neighborhood.name
    .District.name.region
) insert
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then create a new Community by applying a matching set of attribute values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;insertCommunity(
  &amp;quot;BBB&amp;quot;, &amp;quot;url B&amp;quot;, &amp;quot;twitter&amp;quot;, &amp;quot;personal&amp;quot;, Set(&amp;quot;some&amp;quot;, &amp;quot;cat B&amp;quot;), 
    &amp;quot;neighborhood B&amp;quot;, 
    &amp;quot;district B&amp;quot;, &amp;quot;s&amp;quot;
) === List(17592186045789L, 17592186045790L, 17592186045791L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As before, three entities are created here since we reference a new Neighborhood and District.&lt;/p&gt;

&lt;p&gt;All values are type checked against the expected type of each attribute!&lt;/p&gt;

&lt;p&gt;We can also supply the input data as an HList&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;insertCommunity(
  &amp;quot;CCC&amp;quot; :: &amp;quot;url C&amp;quot; :: &amp;quot;twitter&amp;quot; :: &amp;quot;personal&amp;quot; :: Set(&amp;quot;some&amp;quot;, &amp;quot;cat C&amp;quot;) :: 
    &amp;quot;neighborhood C&amp;quot; :: 
    &amp;quot;district C&amp;quot; :: &amp;quot;ne&amp;quot; :: HNil
) === List(17592186045793L, 17592186045794L, 17592186045795L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again each element of the HList has to be of the expected
corresponding attribute type.&lt;/p&gt;

&lt;h3 id=&#34;insert-molecule-multiple-data-tuples:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Insert-Molecule + multiple data tuples&lt;/h3&gt;

&lt;p&gt;With our insert-molecule at hand we can insert large numbers
of data tuples. As an example we can insert 3 communities and
referenced neighborhoods/district/regions in one go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val newCommunitiesData = List(
  (&amp;quot;DDD Blogging Georgetown&amp;quot;, &amp;quot;http://www.blogginggeorgetown.com/&amp;quot;, 
    &amp;quot;blog&amp;quot;, &amp;quot;commercial&amp;quot;, Set(&amp;quot;DD cat 1&amp;quot;, &amp;quot;DD cat 2&amp;quot;), 
    &amp;quot;DD Georgetown&amp;quot;, &amp;quot;Greater Duwamish&amp;quot;, &amp;quot;s&amp;quot;),
  (&amp;quot;DDD Interbay District Blog&amp;quot;, &amp;quot;http://interbayneighborhood.neighborlogs.com/&amp;quot;, 
    &amp;quot;blog&amp;quot;, &amp;quot;community&amp;quot;, Set(&amp;quot;DD cat 3&amp;quot;), 
    &amp;quot;DD Interbay&amp;quot;, &amp;quot;Magnolia/Queen Anne&amp;quot;, &amp;quot;w&amp;quot;),
  (&amp;quot;DDD KOMO Communities - West Seattle&amp;quot;, &amp;quot;http://westseattle.komonews.com&amp;quot;, 
    &amp;quot;blog&amp;quot;, &amp;quot;commercial&amp;quot;, Set(&amp;quot;DD cat 4&amp;quot;), 
    &amp;quot;DD West Seattle&amp;quot;, &amp;quot;Southwest&amp;quot;, &amp;quot;sw&amp;quot;)
)

// Insert 3 new communities with 3 new neighborhoods
insertCommunity(newCommunitiesData) === List(
  17592186045669L, 17592186045670L, 17592186045452L,
  17592186045671L, 17592186045672L, 17592186045540L,
  17592186045673L, 17592186045674L, 17592186045443L)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach gives us a clean way of populating a database
where we can supply raw data from any source easily as long
as we can format it as a list of tuples/HLists of values each matching
our template molecule.&lt;/p&gt;

&lt;p&gt;We use an insert-molecule also when we initially &lt;a href=&#34;https://github.com/scalamolecule/blob/master/examples/src/test/scala/examples/seattle/SeattleSpec.scala#L43&#34;&gt;populate
the Seattle database&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;missing-attribute-values-null-values:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Missing attribute values (Null values)&lt;/h3&gt;

&lt;p&gt;We might have some &amp;ldquo;rows&amp;rdquo; (tuples) of imported data with a
missing attribute value. If for instance some row has no orgtype
value in the data set, we can just use a &lt;code&gt;null&lt;/code&gt; placeholder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;(&amp;quot;community4&amp;quot;, &amp;quot;url2&amp;quot;, &amp;quot;blog&amp;quot;, null, Set(&amp;quot;cat3&amp;quot;, &amp;quot;cat1&amp;quot;), &amp;quot;NbhName4&amp;quot;, &amp;quot;DistName4&amp;quot;, &amp;quot;ne&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In an sql table we would &amp;ldquo;insert a null value&amp;rdquo; for such column.
But with Molecule/Datomic we just simply don&amp;rsquo;t assert any orgtype
value for that entity at all! In other words: there is no orgtype
fact to be asserted.&lt;/p&gt;

&lt;h3 id=&#34;type-safety:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Type safety&lt;/h3&gt;

&lt;p&gt;In this example we have only inserted text strings. But all input
is type checked against the selectedattributes of the molecule which
makes the insert operation type safe. We even infer the expected type
so that our IDE will bark if it finds for instance an Integer
somewhere in our input data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;(&amp;quot;community2&amp;quot;, &amp;quot;url2&amp;quot;, &amp;quot;type2&amp;quot;, 42, Set(&amp;quot;cat3&amp;quot;, &amp;quot;cat1&amp;quot;), &amp;quot;NbhName2&amp;quot;, &amp;quot;DistName2&amp;quot;, &amp;quot;DistReg2&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A data set having the value &lt;code&gt;42&lt;/code&gt; as a value for the &lt;code&gt;orgtype&lt;/code&gt;
attribute won&amp;rsquo;t compile and our IDE will infer that we have an invalid data set.&lt;/p&gt;

&lt;h2 id=&#34;11:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;&lt;a href=&#34;#contents:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;☝︎&lt;/a&gt; Update and/or delete data&lt;/h2&gt;

&lt;p&gt;To update data with Molecule, we first need the id of the entity
that we want to update.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val belltown = Community.e.name_(&amp;quot;belltown&amp;quot;).get.head
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can &amp;ldquo;replace&amp;rdquo; some attributes&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community(belltown).name(&amp;quot;belltown 2&amp;quot;).url(&amp;quot;url 2&amp;quot;).update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What really happens is not a mutation of data since no
data is ever deleted or over-written in Datomic. Instead a
&lt;em&gt;new fact for the attribute is asserted&lt;/em&gt;. The new fact will
turn up when queried for. But if we go back in time we can see
the previous value at that point in time - many updates could
have been performed over time, and all previous values are stored.&lt;/p&gt;

&lt;h3 id=&#34;updating-cardinality-many-attributes:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Updating cardinality-many attributes&lt;/h3&gt;

&lt;p&gt;When updating cardinality-many attributes we need to tell which
of the values we want to update:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community(belltown).category(&amp;quot;news&amp;quot; -&amp;gt; &amp;quot;Cool news&amp;quot;).update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This syntax causes Molecule to first retract the old value &amp;ldquo;news&amp;rdquo;
and then assert/add the new value &amp;ldquo;Cool news&amp;rdquo;. Note that if the
before-value doesn&amp;rsquo;t exist the new value will still be inserted,
so you might be sure what the current value is by querying for it first.&lt;/p&gt;

&lt;p&gt;We can even update several values of a cardinality-many attribute in one go:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community(belltown).category(
  &amp;quot;Cool news&amp;quot; -&amp;gt; &amp;quot;Super cool news&amp;quot;,
  &amp;quot;events&amp;quot; -&amp;gt; &amp;quot;Super cool events&amp;quot;).update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;adding-removing-values-of-cardinality-many-attributes:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Adding/removing values of cardinality-many attributes&lt;/h3&gt;

&lt;p&gt;If we want to add or remove values of a cardinality-many attribute
we can use the following mehtods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;// add
Community(belltown).category.add(&amp;quot;extra category&amp;quot;).update

// remove
Community(belltown).category.remove(&amp;quot;Super cool events&amp;quot;).update
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-retract-values:3d29aefa7257f22b89227d9f373cd5f9&#34;&gt;Delete/retract values&lt;/h3&gt;

&lt;p&gt;When you update a molecule you can apply an empty value &lt;code&gt;apply()&lt;/code&gt;
or simply &lt;code&gt;()&lt;/code&gt; after an attribute name to delete/retract the
attributes value(s). We can mix updates and retractions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community(belltown).name(&amp;quot;belltown 3&amp;quot;).url().category().update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;name&lt;/code&gt; gets the new value &amp;ldquo;belltown 3&amp;rdquo; and both the &lt;code&gt;url&lt;/code&gt; and
&lt;code&gt;category&lt;/code&gt; attributes have their values retracted.&lt;/p&gt;

&lt;p&gt;There are a couple of important things to know about retracting data.
The first is that we must specify the value of the attribute being
retracted. When applying the empty value, Molecule therefore first
looks up the current value in order to be able to retract it.&lt;/p&gt;

&lt;p&gt;The other thing to know is that, because we can access database
values as they existed at specific points in time, we can retrieve
retracted data by looking in the past. In other words, the data
isn&amp;rsquo;t really gone. If we want data to really be gone after we
retract it, we have to disable history for the specific attribute,
as described in &lt;a href=&#34;http://scalamolecule.github.io/manual/database-setup&#34;&gt;Database setup&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Forum</title>
      <link>http://scalamolecule.github.io/community/forum/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/community/forum/</guid>
      <description>

&lt;h1 id=&#34;forum:9bf17893d33490888c600c67505ec118&#34;&gt;Forum&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>http://scalamolecule.github.io/compare/sql/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/compare/sql/</guid>
      <description>

&lt;h1 id=&#34;compare-with-sql:d1babb582138b02a13547d2c6eb6df72&#34;&gt;Compare with SQL&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Transformation</title>
      <link>http://scalamolecule.github.io/developer/transformation/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/developer/transformation/</guid>
      <description>

&lt;h1 id=&#34;source-code-transformation:596edf0adf55e6ba8eb0683b47bc2db2&#34;&gt;Source code transformation&lt;/h1&gt;

&lt;p&gt;As an example: to find&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Names of twitter/facebook_page communities in neighborhoods of southern districts&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;we can compose a &amp;ldquo;molecule query&amp;rdquo; that is very close to our
human sentence:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.`type`(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;)
  .Neighborhood.District.region(&amp;quot;sw&amp;quot; or &amp;quot;s&amp;quot; or &amp;quot;se&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Molecule transforms this at compile time (with macros) to a little more elaborate Datalog query string and
 input rules that finds those communities in the Datomic database:&lt;/p&gt;

&lt;pre&gt;
[:find ?a
 :in $ %
 :where
   [?ent :community/name ?a]
   (rule1 ?ent)
   [?ent :community/neighborhood ?c]
   [?c :neighborhood/district ?d]
   (rule2 ?d)]

INPUTS:
List(
  datomic.db.Db@xxx,
  [[[rule1 ?ent] [?ent :community/type &#34;:community.type/twitter&#34;]]
   [[rule1 ?ent] [?ent :community/type &#34;:community.type/facebook_page&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/sw&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/s&#34;]]
   [[rule2 ?d] [?d :district/region &#34;:district.region/se&#34;]]]
)
&lt;/pre&gt;

&lt;h4 id=&#34;benefits:596edf0adf55e6ba8eb0683b47bc2db2&#34;&gt;Benefits&lt;/h4&gt;

&lt;p&gt;By not having to write such complex Datalog queries and rules &amp;ldquo;by hand&amp;rdquo;, Molecule
allows you to&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type less&lt;/li&gt;
&lt;li&gt;Make type safe queries with inferred return types&lt;/li&gt;
&lt;li&gt;Use your domain terms directly as query building blocks&lt;/li&gt;
&lt;li&gt;Model complex queries intuitively (easier to understand and maintain)&lt;/li&gt;
&lt;li&gt;Reduce syntactic noise&lt;/li&gt;
&lt;li&gt;Focus more on your domain and less on queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;possible-drawbacks:596edf0adf55e6ba8eb0683b47bc2db2&#34;&gt;Possible drawbacks&lt;/h4&gt;

&lt;p&gt;We still need to explore how far Molecule can match the expressive powers
 of Datalog. So far, all
 examples in the
[Seattle tutorial][seattle] have been
&amp;ldquo;molecularized&amp;rdquo; succesfully (see the
[Molecule Seattle tutorial][tutorial] and
[code][tutorialcode]). So as a proof-of-concept it looks promising&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>http://scalamolecule.github.io/home/introduction/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/home/introduction/</guid>
      <description>

&lt;h1 id=&#34;molecule-introduction:2767292a573dc549b9b4297b701af3ab&#34;&gt;Molecule introduction&lt;/h1&gt;

&lt;p&gt;Facts like&lt;/p&gt;

&lt;pre&gt;John likes pizza 12:35:54&lt;/pre&gt;

&lt;p&gt;are stored in Datomic as &lt;code&gt;Datom&lt;/code&gt;s having these 4 basic elements:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;entity&lt;/code&gt; &lt;code&gt;attribute&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; &lt;code&gt;transaction&lt;/code&gt;(time)&lt;/p&gt;

&lt;p&gt;In this example, &lt;em&gt;likes&lt;/em&gt; is an &lt;code&gt;attribute&lt;/code&gt; and it has the &lt;code&gt;value&lt;/code&gt; &lt;em&gt;pizza&lt;/em&gt;. It is &lt;strong&gt;asserted&lt;/strong&gt; that
the &lt;code&gt;entity&lt;/code&gt; &lt;em&gt;John&lt;/em&gt; likes pizza at &lt;code&gt;transaction&lt;/code&gt; time 12:35:54.&lt;/p&gt;

&lt;h3 id=&#34;immutable-data:2767292a573dc549b9b4297b701af3ab&#34;&gt;Immutable data&lt;/h3&gt;

&lt;p&gt;Everytime a fact is asserted the old value of the attribute is &lt;em&gt;not deleted&lt;/em&gt;. A Datomic database
is immutable. We can go back in time and see the values of an attribute &lt;em&gt;at any point in time&lt;/em&gt;. We could for
instance see all our previous addresses if this was part of our domain model.&lt;/p&gt;

&lt;p&gt;Also when we delete data, it&amp;rsquo;s actually not deleted, but &amp;ldquo;retracted&amp;rdquo;. Retracted data doesn&amp;rsquo;t show
 up when we are querying the current database. But if we look at the database at an earlier point in
  time we can see the data before it got retracted.&lt;/p&gt;

&lt;h3 id=&#34;namespaces-and-attributes:2767292a573dc549b9b4297b701af3ab&#34;&gt;Namespaces and attributes&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;attributes&lt;/code&gt; are typically organized in &lt;code&gt;namespaces&lt;/code&gt; to group related qualities of our domain:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://scalamolecule.github.io/img/DatomicElements1.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;entity-row-in-an-sql-table:2767292a573dc549b9b4297b701af3ab&#34;&gt;Entity != row in an sql Table&lt;/h3&gt;

&lt;p&gt;An &lt;code&gt;entity&lt;/code&gt; can have &lt;em&gt;any&lt;/em&gt; &lt;code&gt;attribute&lt;/code&gt; from &lt;em&gt;any&lt;/em&gt; &lt;code&gt;namespace&lt;/code&gt; associated to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://scalamolecule.github.io/img/DatomicElements2.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;An entity is therefore not like a row in a table but rather a &amp;ldquo;cross-cutting&amp;rdquo; thing that we can
freely associate any attribute value to. Note how &amp;ldquo;attrB1&amp;rdquo; in this example is not associated to entity1.&lt;/p&gt;

&lt;h3 id=&#34;molecules:2767292a573dc549b9b4297b701af3ab&#34;&gt;Molecules&lt;/h3&gt;

&lt;p&gt;If we imagine attributes as atomic data units, then we can
imagine molecules as 3-dimensional data structures composed of atoms.&lt;/p&gt;

&lt;p&gt;In Molecule we use the builder pattern to model such data structures, attribute
by attribute until we have a desired data structure. We could model &lt;code&gt;entity1&lt;/code&gt;
from the example above as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;NamespaceA.attrA1.attrA2.NamespaceB.attrB2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;queries-with-molecules:2767292a573dc549b9b4297b701af3ab&#34;&gt;Queries with molecules&lt;/h3&gt;

&lt;p&gt;If a namespace &lt;code&gt;Community&lt;/code&gt; has two attributes &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; we can
model a data structure of community names and urls as a molecule and then ask
the database to return those to us as a list of tuples with &lt;code&gt;name&lt;/code&gt;/&lt;code&gt;url&lt;/code&gt; values:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val namesAndUrls: List[(String, String)] = m(Community.name.url).get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note how the return types of &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are infered.&lt;/p&gt;

&lt;p&gt;Implicit conversions even allow us to condense our query.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val namesAndUrls = Community.name.url.get
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;values-and-expressions:2767292a573dc549b9b4297b701af3ab&#34;&gt;Values and expressions&lt;/h3&gt;

&lt;p&gt;Values and expressions can be applied to attributes of our molecule so that
 we can express more complex data structures:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;Community.name.`type`(&amp;quot;twitter&amp;quot; or &amp;quot;facebook_page&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we find &lt;code&gt;name&lt;/code&gt;s of communities of a &lt;code&gt;type&lt;/code&gt; that has either the value &amp;ldquo;twitter&amp;rdquo;
OR &amp;ldquo;facebook_page&amp;rdquo;. With your own definitions you can write similar
 complex queries in a simple way using the terms of your own domain.&lt;/p&gt;

&lt;h3 id=&#34;further-reading:2767292a573dc549b9b4297b701af3ab&#34;&gt;Further reading&amp;hellip;&lt;/h3&gt;

&lt;p&gt;Go straight to the &lt;a href=&#34;https://github.com/scalamolecule/wiki/Molecule-Seattle-tutorial&#34;&gt;Molecule Seattle tutorial&lt;/a&gt; to see a wide range of
 queries that Molecule can express, or check out first how we use Molecule to
 &lt;a href=&#34;https://github.com/scalamolecule/wiki/Setup-a-Datomic-database&#34;&gt;setup the database&lt;/a&gt; and &lt;a href=&#34;https://github.com/scalamolecule/wiki/Populate-the-database&#34;&gt;populated it with data&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Attributes</title>
      <link>http://scalamolecule.github.io/manual/basics/attributes/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/manual/basics/attributes/</guid>
      <description>

&lt;h1 id=&#34;attributes:199f4b06fef5a61f833f209ac24fd4c2&#34;&gt;Attributes&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Basics</title>
      <link>http://scalamolecule.github.io/manual/basics/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/manual/basics/</guid>
      <description>

&lt;h1 id=&#34;basics:adb90e22eee79282d53440b555325fbd&#34;&gt;Basics&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Quick start&lt;/li&gt;
&lt;li&gt;Getting started

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;safe:adb90e22eee79282d53440b555325fbd&#34;&gt;Safe&lt;/h3&gt;

&lt;p&gt;Our query asks for entities having values defined for all three attributes. If some entity doesn&amp;rsquo;t have the &lt;code&gt;street&lt;/code&gt; attribute set it won&amp;rsquo;t be returned. So we can safely assume that our result set contains no null values and we therefore return the raw values (without using Optional for instance).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://scalamolecule.github.io/home/setup/</link>
      <pubDate>Wed, 14 May 2014 02:13:50 UTC</pubDate>
      
      <guid>http://scalamolecule.github.io/home/setup/</guid>
      <description>

&lt;h1 id=&#34;setup-molecule:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Setup Molecule&lt;/h1&gt;

&lt;h3 id=&#34;download-code:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Download code&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/scalamolecule/molecule.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Import into your IDE&lt;/li&gt;
&lt;li&gt;Run tests and poke around&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;dependency-in-your-project:2cc0b07f42930e4520820be1fe66f913&#34;&gt;Dependency in your project&lt;/h3&gt;

&lt;p&gt;Molecule 0.2.0 for Scala 2.11.4 is available at
&lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/com/scalamolecule/molecule_2.11/&#34;&gt;Sonatype&lt;/a&gt;
 so that you can add a dependency in your sbt file to &lt;code&gt;&amp;quot;com.marcgrue&amp;quot; % &amp;quot;molecule_2.11.4&amp;quot; % &amp;quot;0.2.0&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since Molecule generates boilerplate code from your definitions it also needs to have the &lt;code&gt;DslBoilerplate.scala&lt;/code&gt; file in your project folder. Please have a look at how the sbt build file
 of the Molecule project itself puts things together and simply copy that to your own project:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Setup your sbt build file [as in Molecule][moleculesbt]:

&lt;ul&gt;
&lt;li&gt;Add library dependency &lt;code&gt;&amp;quot;com.marcgrue&amp;quot; % &amp;quot;molecule_2.11.4&amp;quot; % &amp;quot;0.2.0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List directories where you have your [definition file(s)][setup]&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Define your domain schema in a [schema definition file][setup]&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sbt compile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Import into your IDE&lt;/li&gt;
&lt;li&gt;[Setup your database][setup]&lt;/li&gt;
&lt;li&gt;[Populate your database][populate] with data&lt;/li&gt;
&lt;li&gt;[Make molecule queries][tutorial]&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Database setup</title>
      <link>http://scalamolecule.github.io/manual/database-setup/</link>
      <pubDate>Fri, 02 Jan 2015 22:06:44 CET</pubDate>
      
      <guid>http://scalamolecule.github.io/manual/database-setup/</guid>
      <description>

&lt;h1 id=&#34;database-setup:029b5641f6c81b30970318acf78606be&#34;&gt;Database setup&lt;/h1&gt;

&lt;p&gt;To create a fresh in-memory Datomic database we simply pass an URI string to
&lt;code&gt;Peer.createDatabase&lt;/code&gt; (to be sure that this URI is not already populated we
first delete it):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-scala&#34;&gt;val uri = &amp;quot;datomic:mem://seattle&amp;quot;
Peer.deleteDatabase(uri)
Peer.createDatabase(uri)
implicit val conn = Peer.connect(uri)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We save the returned Datomic Connection as an implicit value so that our
molecules can later issue queries against it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>